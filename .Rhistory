library(hexbin)
library(flextable)
file.copy(from="./outputs/31_05_2023/outputs/overall_models/location_only/tva/country_village.rda",
to = "./outputs/31_05_2023/outputs/overall_models/variable_addition/tva/")
file.copy(from="./outputs/31_05_2023/outputs/overall_models/location_only/tva/loo_country_village.rda",
to = "./outputs/31_05_2023/outputs/overall_models/variable_addition/tva/")
file.copy(from="./outputs/31_05_2023/outputs/overall_models/location_only/tva/r2_country_village.rda",
to = "./outputs/31_05_2023/outputs/overall_models/variable_addition/tva/")
file.copy(from="./outputs/31_05_2023/outputs/overall_models/location_only/hdds/country_village.rda",
to = "./outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/")
file.copy(from="./outputs/31_05_2023/outputs/overall_models/location_only/hdds/loo_country_village.rda",
to = "./outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/")
file.copy(from="./outputs/31_05_2023/outputs/overall_models/location_only/hdds/r2_country_village.rda",
to = "./outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/")
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
vpc <- function(model, params){
draws_df <-  as_draws_df(model)[params]
vpcs <- list()
for (param in params){
other_params <- params[params!=param]
vpcs[[param]] <- draws_df[[param]]^2/rowSums(draws_df[params]^2)
}
vpcs <- vpcs %>% as_tibble()
return(vpcs)
}
summarise_estimates <- function(draws_df, params_list){
# draws_df$Total <- rowSums(draws_df)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draw_summary <- rbind(draws.66,draws.95)
clean_names <- names(params_list)[match(draw_summary$key,as.character(params_list))]
# clean_names <- c("Total",names(params_list))[match(draw_summary$key,c("Total",as.character(params_list)))]
draw_summary$key <- clean_names
return(draw_summary)
}
estimates_plot <- function(draws_df,
params_list,
title,
sort=F
){
draw_summary <-summarise_estimates(draws_df,
params_list)
draw_summary$key <- factor(draw_summary$key,
levels=names(params_list),
ordered = T)
draw_summary$level <- factor(draw_summary$level, levels=c("0.66 Level","0.95 Level"),ordered = T)
if (sort==T){
factor_order <- draw_summary$key[order(draw_summary$Estimate[draw_summary$level=="0.66 Level"])]
draw_summary$key <- factor(draw_summary$key, levels=factor_order,ordered = T)
}
plot <- ggplot(draw_summary, aes(y = key,x=Estimate,shape="Estimate"))+
geom_point(show.legend = T,size=3)+
geom_segment(aes(y=key,yend=key,x=min,xend=max,linewidth=level))+
scale_discrete_manual("linewidth", values = c("0.95 Level"=0.75, "0.66 Level"=1.5))+
labs(x="Estimate", y="", title=title)+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid", "solid"))),
shape=guide_legend(title="")) +
theme(plot.title = element_text(hjust=0.5))
return(plot)
}
get_random_effects <- function(model,
variable_of_interest,
title,
sort=T,
prefix="r_id_form"){
# model <-weak_prior_tva_random
# variable_of_interest <- "norm_growing_period"
# prefix="r_id_form"
all_vars <- get_variables(model)
random_vars <- all_vars[grepl(paste0("^",prefix),all_vars) & grepl(variable_of_interest,all_vars)]
clean_vars <- gsub(".*\\[","",random_vars)
clean_vars <- gsub(",.*","",clean_vars)
params_list <- setNames(as.list(random_vars), clean_vars)
draws_df <- as_draws_df(model)[as.character(random_vars)]
plot <- estimates_plot(draws_df,
params_list,
title,
sort=sort)
return(plot)
}
all_plots <- function(model,
model_name,
variables,
levels_variables,
base_path
){
dir.create(base_path)
all_vars <- get_variables(model)
draws_df <- as_draws_df(model)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draw_summary <- rbind(draws.66,draws.95)
# Plotting Levels Estimates
levels_summary <- draw_summary %>% filter(key %in% as.character(levels_variables))
clean_names <- names(levels_variables)[match(levels_summary$key,as.character(levels_variables))]
levels_summary$key <- clean_names
levels_summary$key <- factor(levels_summary$key,
levels=names(levels_variables),
ordered = T)
levels_plots <- quick_estimates_plot(levels_summary, title=paste0("Levels of Variation for Model ", model_name), sort=F)
ggsave(filename = paste0(base_path,"/levels_estimates.png"),
plot = levels_plots,width = 5000,height=3500,units = "px")
# Plotting Fixed Effects
fixed_effects <- c(paste0("b_",variables))
fixed_effects <- setNames(fixed_effects,variables) %>% as.list()
fixed_effects_summary <- draw_summary %>% filter(key %in% as.character(fixed_effects))
clean_names <- names(fixed_effects)[match(fixed_effects_summary$key,as.character(fixed_effects))]
fixed_effects_summary$key <- clean_names
clean_names <- names(variables)[match(fixed_effects_summary$key,as.character(variables))]
fixed_effects_summary$key <- clean_names
fixed_effects_summary$key <- factor(fixed_effects_summary$key,
levels=names(variables),
ordered = T)
fixed_plots <- quick_estimates_plot(fixed_effects_summary, title=paste0("Fixed Effects for Model ", model_name), sort=T)
ggsave(filename = paste0(base_path,"/fixed_effects_plots.png"),
plot = fixed_plots,width = 2500,height=3000,units = "px")
# Mixed  Effects
variables_in <- lapply(variables,function(x){
grepl(as.character(x),draw_summary$key)
}) %>% bind_cols()
variables_in <- rowSums(variables_in)
# levels_in <-lapply(levels_variables,function(x){
#   grepl(as.character(x),draw_summary$key)
# }) %>% bind_cols()
#
# levels_in <- rowSums(levels_in)
#
sd_in <- as.numeric(grepl("sd_",draw_summary$key))
subset <- sd_in>0 & variables_in > 0
if (any(subset)){
mixed_effects <- draw_summary$key[subset]
names <- gsub(".*__","",mixed_effects)
mixed_effects <- setNames(mixed_effects,names) %>% as.list()
mixed_effects_summary <- draw_summary %>% filter(key %in% as.character(mixed_effects))
clean_names <- names(mixed_effects)[match(mixed_effects_summary$key,as.character(mixed_effects))]
mixed_effects_summary$key <- clean_names
clean_names <- names(variables)[match(mixed_effects_summary$key,as.character(variables))]
mixed_effects_summary$key <- clean_names
mixed_effects_summary$key <- factor(mixed_effects_summary$key,
levels=names(variables),
ordered = T)
mixed_plots <- quick_estimates_plot(mixed_effects_summary, title=paste0("Random Effects for Model ", model_name), sort=T)
ggsave(filename = paste0(base_path,"/mixed_effects_plots.png"),
plot = mixed_plots,width = 2500,height=3000,units = "px")
# Plotting random effects
dir.create(paste0(base_path,"/random_effects"))
variables_in <- lapply(variables,function(x){
grepl(as.character(x),draw_summary$key)
}) %>% bind_cols()
variables_in <- rowSums(variables_in)
r_in <- as.numeric(grepl("^r_",draw_summary$key))
# cor_not_in <- as.numeric(!grepl("corr_",draw_summary$key))
subset <- r_in >0 & variables_in > 0
random_effects <- draw_summary$key[subset]
names <- gsub(".*,","",random_effects)
names <- gsub("\\]","",names)
levels <- gsub(".*\\[","",random_effects)
levels <- gsub(",.*","",levels)
effect_names <- tibble(
level=levels,
variable=names,
random_effect=random_effects
)
all_variables <- unique(effect_names$variable)
for (variable_to_plot in all_variables){
all_levels <- effect_names$level[effect_names$variable==variable_to_plot]
all_effects <- effect_names$random_effect[effect_names$variable==variable_to_plot]
random_effects <- setNames(all_effects,all_levels) %>% as.list()
random_effects_summary <- draw_summary %>% filter(key %in% as.character(random_effects))
clean_names <- names(random_effects)[match(random_effects_summary$key,as.character(random_effects))]
random_effects_summary$key <- clean_names
random_plots <- quick_estimates_plot(random_effects_summary, title=paste0("Random Effects for Model: ", model_name,'\nVariable: ',variable_to_plot), sort=T)
ggsave(filename = paste0(base_path,"/random_effects/",variable_to_plot,".png"),
plot = random_plots,width = 2500,height=3000,units = "px")
}
}
}
quick_estimates_plot <- function(draw_summary, title,sort=F){
if(sort==T){
factor_order <- draw_summary$key[order(draw_summary$Estimate[draw_summary$level=="0.66 Level"])]
draw_summary$key <- factor(draw_summary$key, levels=factor_order,ordered = T)
}
plot <- ggplot(draw_summary, aes(y = key,x=Estimate,shape="Estimate"))+
geom_point(show.legend = T,size=3)+
geom_segment(aes(y=key,yend=key,x=min,xend=max,linewidth=level))+
scale_discrete_manual("linewidth", values = c("0.95 Level"=0.75, "0.66 Level"=1.5))+
labs(x="Estimate", y="", title=title)+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid", "solid"))),
shape=guide_legend(title="")) +
theme(plot.title = element_text(hjust=0.5))
return(plot)
}
dir.create(paste0("outputs/overall_model_results/variable_addition/"))
# Model Comparison
variables <- list(
# "Education (Pre Primary)"="education_cleanedpre_primary",
"Household Size"="hh_size",
"Education (Primary)"="educationprimary",
"Education (Secondary/Higher)"="educationsecondary_or_higher",
"Livestock TLU"="livestock_tlu",
"Land Cultivated"="land_cultivated",
"Any Off Farm Income"= "off_farm_any",
"Assisted Tillage"="assisted_tillage",
"External Labour"="external_labour",
# "Use Pesticide"="pesticide",
"Have Debts"="debts_have",
# "Received Aid"="aidreceived",
"Use Livestock Inputs"="livestock_inputs_any",
"Irrigate Land"="land_irrigated_any",
"Use Fertiliser"="use_fert",
"Market Orientation"="market_orientation",
"Home Garden"="homegarden",
"Number of Income Sources"="number_income_sources",
"Growing Period"="growing_period",
"Population Density"="pop_dens",
"Minimum Travel Time"="min_travel_time",
"Country HDI"="gdl_country_shdi"
)
levels_variables <- list(
"Country"="sd_iso_country_code__Intercept",
"Village"="sd_iso_country_code:village__Intercept",
"Project"="sd_id_form__Intercept",
"Unexplained"="sigma"
)
model_files <- list.files("outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/")
model_files <- c(model_files, list.files("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/"))
model_files <- unique(model_files)
model_files <- model_files[grepl("^r2",x=model_files)==F & grepl("^loo",x=model_files)==F]
model_files
model_file <- "weak_prior_fixed.rda"
model_name <- gsub(".rda","",model_file,fixed=T)
tva_path <- paste0("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/",model_file)
tva_model <- loadRData(tva_path)
tva_model
source("~/research/phd/chapter-6-analysis/src/03-modelling/03-variable-addition.R")
library(readr)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
library(flextable)
library(rhomis)
library(XML)
library(GGally)
indicator_data <- readr::read_csv("./data/02-prepared-data/rhomis-spatial-merged.csv")
# crop_name_cleaner <- readr::read_csv("./data/01-raw-data/rhomis-data/rhomis/crop_name_to_std.csv")
indicator_data <- indicator_data[!is.na(indicator_data$gps_lat) & !is.na(indicator_data$gps_lon),]
indicator_data <- indicator_data[!is.na(indicator_data$village),]
indicator_data <- indicator_data[!is.na(indicator_data$iso_country_code),]
indicator_data$index <- 1:nrow(indicator_data)
indicator_data$village <- paste0(indicator_data$gdlcode,"_",indicator_data$village)
# Identifying categorical Variables ---------------------------------------
education <- indicator_data %>% count(education_level)
education_conversion <- tribble(
~education_level, ~education_cleaned,
"no_answer",NA,
"no_school","pre_primary",
"none","pre_primary",
"enrolled_not_completed",   "pre_primary",
"illiterate",   "pre_primary",
"primary","primary",
"primary_1","primary",
"primary_2","primary",
"adult_education",   "primary",
"adult education, literacy school or parish school", "primary",
"1, alphabã©tisã©(moorã©)", "primary",
"1(ã©cole rurale)", "primary",
"1 5alphabetisã©", "primary",
"12 alphabã©tisã© (moorã©)", "primary",
"15alplabetisation", "primary",
"4, 5 alphabã©tisation en moorã©", "primary",
"5 alphabã©tisation", "primary",
"5 alphabã©tisation en moorã©", "primary",
"5alphabetisation", "primary",
"primarry_completed","primary",
"coranic",   "primary",
"islamic_school","primary",
"koranic_school","primary",
"religious_school","primary",
"literate","primary",
"secondary","secondary_or_higher",
"highschool_completed","secondary_or_higher",
"secondary_1","secondary_or_higher",
"secondary_2","secondary_or_higher",
"lower_secondary","secondary_or_higher",
"upper_secondary","secondary_or_higher",
"vocational","secondary_or_higher",
"technical","secondary_or_higher",
"college",   "secondary_or_higher",
"postsecondary","secondary_or_higher"
)
indicator_data <- indicator_data %>% base::merge(education_conversion,by="education_level",all.x=T,all.y=F) %>% as_tibble()
if (any(duplicated(indicator_data$index))){
stop("Duplicate row created during merge")
}
# indicator_data$education_level <- factor(indicator_data$education_level, levels=education_conversion$education_level,
#                                          ordered = T)
indicator_data$education_cleaned <- factor(indicator_data$education_cleaned, levels=unique(education_conversion$education_cleaned),
ordered = T)
cleaned_aggregation <-indicator_data[c("education_level","education_cleaned")] %>%
count(education_level,education_cleaned)
cleaned_aggregation <- na.omit(cleaned_aggregation)
cleaned_aggregation <- cleaned_aggregation[c("education_level","n","education_cleaned")]
colnames(cleaned_aggregation) <- c("Original Value", "Count", "Cleaned Value")
totals <- cleaned_aggregation %>% group_by(`Cleaned Value`) %>% summarise(Total=sum(Count))
cleaned_aggregation <- cleaned_aggregation %>% merge(totals,by="Cleaned Value",all.x=T,all.y=F) %>% as_tibble()
cleaned_aggregation <- cleaned_aggregation[c("Original Value","Count","Cleaned Value", "Total")]
cleaned_aggregation <- cleaned_aggregation[order(cleaned_aggregation$`Original Value`, cleaned_aggregation$`Cleaned Value`),]
cleaned_aggregation$`Cleaned Value`[duplicated(cleaned_aggregation$`Cleaned Value`)] <- NA
cleaned_aggregation$Total[is.na(cleaned_aggregation$`Cleaned Value`)] <- NA
above_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- cleaned_aggregation %>% flextable::flextable() %>%
bold( bold = TRUE, part="header") %>%
hline(i = above_row_selectors)  %>%
bold(i = bold_row_selectors,j = c("Cleaned Value", "Total"))
dir.create("./outputs/02-data-exploration/category_merging")
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/category_merging/education_merging.png")
# Farming Practices -------------------------------------------------------
assisted_tillage <- grepl("by_animal",indicator_data$tillage_power) |
grepl("by_machine",indicator_data$tillage_power)
assisted_tillage <- as.numeric(assisted_tillage)
indicator_data$assisted_tillage <- assisted_tillage
#labour
hired_labour <- grepl("hire_labour",indicator_data$farm_labour) |
grepl("reciprocal",indicator_data$farm_labour)
hired_labour <- as.numeric(hired_labour)
indicator_data$external_labour <- hired_labour
# pesticide <- grepl("pest",indicator_data$agric_inputs)
# pesticide <- as.numeric(pesticide)
# indicator_data$pesticide <- pesticide
#
inputs <- rhomis::split_string_categories_to_dummy(indicator_data$agric_inputs,seperator = " ")
fertilisers <- c("fertilisers","npk","urea","dap","micro_dose_fertilisers","microbial_fert")
use_fert <- rowSums(inputs[fertilisers], na.rm = T)>0
indicator_data$use_fert <- as.numeric(use_fert)
debts_have <- indicator_data$debts_have
debts_have[debts_have=="dont_know"] <- NA
debts_have[debts_have=="no_answer"] <- NA
debts_have <- debts_have=="y"
debts_have <- as.numeric(debts_have)
indicator_data$debts_have <- debts_have
indicator_data$debts_have[is.na(indicator_data$debts_have)] <- 0
indicator_data$kitchen_garden <- indicator_data$homegarden
version()
version
source("~/research/phd/chapter-6-analysis/src/02-data-exploration/04-aggregating-categories.R")
final_modelling_df
final_modelling_df$kitchen_garden
indicator_data$kitchen_garden <- as.numeric(indicator_data$kitchen_garden)
indicator_data$kitchen_garden
indicator_data$kitchen_garden <- indicator_data$homegarden
indicator_data$kitchen_garden[indicator_data$kitchen_garden=="y"] <- TRUE
indicator_data$kitchen_garden[indicator_data$kitchen_garden=="n"] <- FALSE
indicator_data$kitchen_garden[indicator_data$kitchen_garden=="no_answer"] <- NA
indicator_data$kitchen_garden
kitchen_garden <- indicator_data$homegarden
kitchen_garden[kitchen_garden=="y"] <- TRUE
kitchen_garden[kitchen_garden=="n"] <- FALSE
kitchen_garden[kitchen_garden=="no_answer"] <- NA
kitchen_garden
kitchen_garden[kitchen_garden=="TRUE"] <- TRUE
kitchen_garden
temp_kg <- rep("FALSE",length(kitchen_garden))
temp_kg
temp_kg <- rep(FALSE,length(kitchen_garden))
temp_kg
temp_kg[kitchen_garden==TRUE] <- TRUE
temp_kg
kitchen_garden <- indicator_data$homegarden
kitchen_garden[kitchen_garden=="y"] <- TRUE
kitchen_garden[kitchen_garden=="n"] <- FALSE
kitchen_garden[kitchen_garden=="no_answer"] <- NA
temp_kg <- rep(FALSE,length(kitchen_garden))
temp_kg[kitchen_garden=="TRUE"] <- TRUE
temp_kg[kitchen_garden=="FALSE"] <- FALSE
temp_kg[is.na(kitchen_garden)] <- NA
indicator_data$kitchen_garden <- as.numeric(temp_kg)
indicator_data$kitchen_garden
table(is.na(indicator_data$kitchen_garden))
unique(indicator_data$homegarden)
source("~/research/phd/chapter-6-analysis/src/02-data-exploration/04-aggregating-categories.R")
final_modelling_df$kitchen_garden
renv::status()
renv::restore()
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
renv::status()
renv::restore()
renv::restore()
install.packages("ragg")
renv::restore()
install.packages("ragg")
renv::status()
install.packages("remotes")
library(remotes)
remotes::install_version("ragg",version="1.2.2")
renv::install("ragg")
renv::restore()
install.packages("openssl")
renv::restore()
source("~/research/phd/chapter-6-analysis/src/04-interpretation/03-variable-addition.R")
variables <- list(
# "Education (Pre Primary)"="education_cleanedpre_primary",
"Household Size"="hh_size",
"Education (Primary)"="educationprimary",
"Education (Secondary/Higher)"="educationsecondary_or_higher",
"Livestock TLU"="livestock_tlu",
"Land Cultivated"="land_cultivated",
"Any Off Farm Income"= "off_farm_any",
"Assisted Tillage"="assisted_tillage",
"External Labour"="external_labour",
# "Use Pesticide"="pesticide",
"Have Debts"="debts_have",
# "Received Aid"="aidreceived",
"Use Livestock Inputs"="livestock_inputs_any",
"Irrigate Land"="land_irrigated_any",
"Use Fertiliser"="use_fert",
"Market Orientation"="market_orientation",
"Home Garden"="kitchen_garden",
"Number of Income Sources"="number_income_sources",
"Growing Period"="growing_period",
"Population Density"="pop_dens",
"Minimum Travel Time"="min_travel_time",
"Country HDI"="gdl_country_shdi"
)
levels_variables <- list(
"Country"="sd_iso_country_code__Intercept",
"Village"="sd_iso_country_code:village__Intercept",
"Project"="sd_id_form__Intercept",
"Unexplained"="sigma"
)
model_files <- list.files("outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/")
model_files <- c(model_files, list.files("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/"))
model_files <- unique(model_files)
model_files <- model_files[grepl("^r2",x=model_files)==F & grepl("^loo",x=model_files)==F]
model_files
model_file <- "weak_prior_fixed.rda"
model_name <- gsub(".rda","",model_file,fixed=T)
tva_path <- paste0("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/",model_file)
tva_model <- loadRData(tva_path)
tva_model
source("~/research/phd/chapter-6-analysis/src/04-interpretation/03-variable-addition.R")
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/tva/weak_prior_fixed/projpred_cv_varsel_model_1.rda")
ref_model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_fixed.rda")
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
library(projpred)
library(brms)
library(ggplot2)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/tva/weak_prior_fixed/projpred_cv_varsel_model_1.rda")
ref_model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_fixed.rda")
plot(cvvs,stats = "mlpd", ranking_nterms_max = NA)
?plot.vsel
source("~/research/phd/chapter-6-analysis/src/04-interpretation/03-variable-addition.R")
