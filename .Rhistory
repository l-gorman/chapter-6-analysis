projpred::break_up_matrix_term(cvvs)
.tabulate_stats(cvvs)
projpred::.tabulate_stats(cvvs)
projpred::get_stat(cvvs)
projpred::get_stat(cvvs)
projpred::plot.vsel
summary(get_stat)
summary(cvvs)
summary(cvvs) %>% as_data_frame()
summary(cvvs) %>% as.data.frame()
summary(cvvs) %>% as_tibble()
summary(cvvs)
print(summary(cvvs))
summary(cvvs) %>% unclass()
summary(cvvs) %>% unclass() %>% select("selection")
summary(cvvs) %>% unclass() %>% filter("selection")
unclass(summary(cvvs))[["selection"]]
selection_summary <- unclass(summary(cvvs))[["selection"]]
selection_summary <- unclass(summary(cvvs))[["selection"]]
selection_summary$solution_terms <- gsub("(1 | iso_country_code) + (1 | iso_country_code:village)","location_grouping",selection_summary$solution_terms)
selection_summary
selection_summary <- selection_summary[complete.cases(selection_summary),]
ggplot(selection_summary)+
geom_point(y=elpd.kfold, solution_terms,)
ggplot(selection_summary)+
geom_point(y=elpd.kfold, x=size)
ggplot(selection_summary)+
geom_point(aes(y=elpd.kfold, x=size))
ggplot(selection_summary)+
geom_point(aes(y=elpd.kfold, x=size))+
hline(yintercept=0)
?hline
ggplot(selection_summary)+
geom_point(aes(y=elpd.kfold, x=size))+
geom_hline(yintercept=0)
selection_summary <- unclass(summary(cvvs))[["selection"]]
selection_summary$solution_terms <- gsub("(1 | iso_country_code) + (1 | iso_country_code:village)","location_grouping",selection_summary$solution_terms)
ggplot(selection_summary)+
geom_point(aes(y=elpd.kfold, x=size))+
geom_hline(yintercept=0)
cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/hdds/weak_prior_fixed/projpred_cv_varsel_model_8.rda")
# pr_rk <- cv_proportions(rk)
# plot(pr_rk)
rk <- ranking(cvvs)
plot(cv_proportions(rk, cumulate = TRUE))
size_decided <- 12
predictors_final <- head(rk[["fulldata"]], size_decided)
# pr_rk <- cv_proportions(rk)
# plot(pr_rk)
rk <- ranking(cvvs)
plot(cv_proportions(rk, cumulate = TRUE))
ggplot(selection_summary)+
geom_point(aes(y=elpd.kfold, x=size))+
geom_hline(yintercept=0)
?cv_varsel
table(indicator_data$market_orientation > 0.25)
source("~/research/phd/chapter-6-analysis/src/02-data-exploration/04-aggregating-categories.R")
scp -r ./data/02-prepared-data  lg14410@bc4login.acrc.bris.ac.uk:/user/work/lg14410/chapter-6/data/
models <-  list(
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# TVA --------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Weak Prior Model --------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
list(
tag="weak_fixed_only",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
# Demographics
log_hh_size +
education_cleaned +
#Assets
log_livestock_tlu +
log_land_cultivated +
# Practices
off_farm_any+
till_not_by_hand+
external_labour+
pesticide+
debts_have+
aidreceived+
livestock_inputs_any+
land_irrigated_any+
#------------------
# Village Level
norm_growing_period +
log_min_travel_time +
log_pop_dens +
#------------------
#County Level
norm_gdl_country_shdi),
prior="weak"),
list(
tag="weak_prior_fixed",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#------------------
#Household Level
# Demographics
log_hh_size +
education_cleaned +
#Assets
log_livestock_tlu +
log_land_cultivated +
# Practices
off_farm_any+
till_not_by_hand+
external_labour+
pesticide+
debts_have+
aidreceived+
livestock_inputs_any+
land_irrigated_any+
#------------------
# Village Level
norm_growing_period +
log_min_travel_time +
log_pop_dens +
#------------------
#County Level
norm_gdl_country_shdi+
# Levels
(1 | iso_country_code) +
(1 | iso_country_code:village)),
prior="weak"
),
list(
tag="weak_prior_mixed_country",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
# Demographics
log_hh_size +
education_cleaned +
#Assets
log_livestock_tlu +
log_land_cultivated +
# Practices
off_farm_any+
till_not_by_hand+
external_labour+
pesticide+
debts_have+
aidreceived+
livestock_inputs_any+
land_irrigated_any+
#------------------
# Village Level
norm_growing_period +
log_min_travel_time +
log_pop_dens +
#------------------
#County Level
norm_gdl_country_shdi+
# Levels
(1 +
log_land_cultivated +
log_livestock_tlu +
off_farm_any | iso_country_code) +
(1 | iso_country_code:village)),
prior="weak"),
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# HDDS --------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Weak Prior Model --------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
list(
tag="weak_fixed_only",
data=indicator_data,
formula=bf(norm_hdds_lean_season ~ 1 +
#Household Level
# Demographics
log_hh_size +
education_cleaned +
#Assets
log_livestock_tlu +
log_land_cultivated +
# Practices
off_farm_any+
till_not_by_hand+
external_labour+
pesticide+
debts_have+
aidreceived+
livestock_inputs_any+
land_irrigated_any+
#------------------
# Village Level
norm_growing_period +
log_min_travel_time +
log_pop_dens +
#------------------
#County Level
norm_gdl_country_shdi),
prior="weak"),
list(
tag="weak_prior_fixed",
data=indicator_data,
formula=bf(norm_hdds_lean_season ~ 1 +
#------------------
#Household Level
# Demographics
log_hh_size +
education_cleaned +
#Assets
log_livestock_tlu +
log_land_cultivated +
# Practices
off_farm_any+
till_not_by_hand+
external_labour+
pesticide+
debts_have+
aidreceived+
livestock_inputs_any+
land_irrigated_any+
#------------------
# Village Level
norm_growing_period +
log_min_travel_time +
log_pop_dens +
#------------------
#County Level
norm_gdl_country_shdi+
# Levels
(1 | iso_country_code) +
(1 | iso_country_code:village)),
prior="weak"
),
list(
tag="weak_prior_mixed_country",
data=indicator_data,
formula=bf(norm_hdds_lean_season ~ 1 +
#Household Level
# Demographics
log_hh_size +
education_cleaned +
#Assets
log_livestock_tlu +
log_land_cultivated +
# Practices
off_farm_any+
till_not_by_hand+
external_labour+
pesticide+
debts_have+
aidreceived+
livestock_inputs_any+
land_irrigated_any+
log_pop_dens +
#------------------
# Village Level
norm_growing_period +
log_min_travel_time +
log_pop_dens +
#------------------
#County Level
norm_gdl_country_shdi+
# Levels
(1 +
log_land_cultivated +
log_livestock_tlu +
off_farm_any | iso_country_code) +
(1 | iso_country_code:village)),
prior="weak")
)
models
# Market Orientation (Logit)
modelling_data_set$logit_market_orientation <- logit(modelling_data_set$market_orientation)
modelling_data_set$logit_market_orientation <- normalisation(modelling_data_set$logit_market_orientation)
modelling_data_set$market_orientation
source("~/research/phd/chapter-6-analysis/src/02-data-exploration/04-aggregating-categories.R")
auxilliary_variables <- c(
"log_hh_size",
'education_cleaned',
#Assets
'log_livestock_tlu',
'log_land_cultivated',
"logit_market_orientation",
# Practices
'off_farm_any',
'till_not_by_hand',
'external_labour',
'pesticide',
'debts_have',
'aidreceived',
'livestock_inputs_any',
'land_irrigated_any',
#------------------
# Village Level
'norm_growing_period',
'log_min_travel_time',
'log_pop_dens',
#------------------
#County Level
'norm_gdl_country_shdi'
)
auxilliary_variables
length(auxilliary_variables)
# Adapted from Frank Weber's Solution
# https://github.com/stan-dev/projpred/issues/346
get_search_terms <- function(fixed_terms, other_predictors, max_terms) {
if (max_terms > length(other_predictors)){
stop("Cannot have max terms more than predictors")
}
search_terms <- unlist(lapply(1:max_terms, function(m_predictors) {
lapply(combn(other_predictors, m = m_predictors, simplify = FALSE),
function(idxs_predictors) {
paste0(idxs_predictors, collapse = " + ")
})
}))
search_terms <- c(fixed_terms, paste(fixed_terms, "+", search_terms))
return(search_terms)
}
auxilliary_variables <- c(
"log_hh_size",
'education_cleaned',
#Assets
'log_livestock_tlu',
'log_land_cultivated',
"logit_market_orientation",
# Practices
'off_farm_any',
'till_not_by_hand',
'external_labour',
'pesticide',
'debts_have',
'aidreceived',
'livestock_inputs_any',
'land_irrigated_any',
#------------------
# Village Level
'norm_growing_period',
'log_min_travel_time',
'log_pop_dens',
#------------------
#County Level
'norm_gdl_country_shdi'
)
group_effects <-"(1 | iso_country_code) + (1 | iso_country_code:village)"
# Basing this off of discussion on stan forum:
# https://discourse.mc-stan.org/t/projpred-fixing-group-effects-in-search-terms-and-tips-for-speed/31678/4
search_terms <- get_search_terms(group_effects,auxilliary_variables, max_terms=length(auxilliary_variables))
search_terms
library(readr)
length(auxilliary_variables)
?cv_varsel
# Basing this off of discussion on stan forum:
# https://discourse.mc-stan.org/t/projpred-fixing-group-effects-in-search-terms-and-tips-for-speed/31678/4
search_terms <- get_search_terms(group_effects,auxilliary_variables, max_terms=max_vars)
auxilliary_variables <- c(
"log_hh_size",
'education_cleaned',
#Assets
'log_livestock_tlu',
'log_land_cultivated',
"logit_market_orientation",
# Practices
'off_farm_any',
'till_not_by_hand',
'external_labour',
'pesticide',
'debts_have',
'aidreceived',
'livestock_inputs_any',
'land_irrigated_any',
#------------------
# Village Level
'norm_growing_period',
'log_min_travel_time',
'log_pop_dens',
#------------------
#County Level
'norm_gdl_country_shdi'
)
group_effects <-"(1 | iso_country_code) + (1 | iso_country_code:village)"
paste0(idxs_predictors, collapse = " + ")
lapply(combn(other_predictors, m = m_predictors, simplify = FALSE),
function(idxs_predictors) {
paste0(idxs_predictors, collapse = " + ")
})
search_terms <- unlist(lapply(1:max_terms, function(m_predictors) {
lapply(combn(other_predictors, m = m_predictors, simplify = FALSE),
function(idxs_predictors) {
paste0(idxs_predictors, collapse = " + ")
})
}))
# Adapted from Frank Weber's Solution
# https://github.com/stan-dev/projpred/issues/346
get_search_terms <- function(fixed_terms, other_predictors, max_terms) {
if (max_terms > length(other_predictors)){
stop("Cannot have max terms more than predictors")
}
search_terms <- unlist(lapply(1:max_terms, function(m_predictors) {
lapply(combn(other_predictors, m = m_predictors, simplify = FALSE),
function(idxs_predictors) {
paste0(idxs_predictors, collapse = " + ")
})
}))
search_terms <- c(fixed_terms, paste(fixed_terms, "+", search_terms))
return(search_terms)
}
auxilliary_variables <- c(
"log_hh_size",
'education_cleaned',
#Assets
'log_livestock_tlu',
'log_land_cultivated',
"logit_market_orientation",
# Practices
'off_farm_any',
'till_not_by_hand',
'external_labour',
'pesticide',
'debts_have',
'aidreceived',
'livestock_inputs_any',
'land_irrigated_any',
#------------------
# Village Level
'norm_growing_period',
'log_min_travel_time',
'log_pop_dens',
#------------------
#County Level
'norm_gdl_country_shdi'
)
group_effects <-"(1 | iso_country_code) + (1 | iso_country_code:village)"
max_vars <- 10
# Basing this off of discussion on stan forum:
# https://discourse.mc-stan.org/t/projpred-fixing-group-effects-in-search-terms-and-tips-for-speed/31678/4
search_terms <- get_search_terms(group_effects,auxilliary_variables, max_terms=max_vars)
search_terms
auxilliary_variables <- c(
"log_hh_size",
'education_cleaned',
#Assets
'log_livestock_tlu',
'log_land_cultivated',
"logit_market_orientation",
# Practices
'off_farm_any',
'till_not_by_hand',
'external_labour',
# 'pesticide',
'debts_have',
# 'aidreceived',
'livestock_inputs_any',
'land_irrigated_any',
#------------------
# Village Level
'norm_growing_period',
'log_min_travel_time',
# 'log_pop_dens',
#------------------
#County Level
'norm_gdl_country_shdi'
)
group_effects <-"(1 | iso_country_code) + (1 | iso_country_code:village)"
max_vars <- 10
# Basing this off of discussion on stan forum:
# https://discourse.mc-stan.org/t/projpred-fixing-group-effects-in-search-terms-and-tips-for-speed/31678/4
search_terms <- get_search_terms(group_effects,auxilliary_variables, max_terms=max_vars)
search_terms
cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/tva/weak_prior_fixed/projpred_cv_varsel_model_1.rda")
library(projpred)
library(brms)
library(ggplot2)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/tva/weak_prior_fixed/projpred_cv_varsel_model_1.rda")
# cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/hdds/weak_prior_fixed/projpred_cv_varsel_model_8.rda")
ref_model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/weak_prior_fixed.rda")
# S
predictor_plot <- plot(cvvs,stats="mlpd",deltas = TRUE,text_angle=90)
predictor_plot
cvvs <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/proj_pred/hdds/weak_prior_fixed/projpred_cv_varsel_model_8.rda")
ref_model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_fixed.rda")
project(cvvs, solution_terms = "(1|iso_country_code) (1|iso_country_code:village)+pesticide")
projection <- project(cvvs, solution_terms = "(1|iso_country_code) (1|iso_country_code:village)+pesticide")
projection$solution_terms
projection$wdraws_prj
projection$p_type
projection$outdmin
names(projection$outdmin)
renv::install("projpred")
renv::status()
renv::snapshot()
install.packages("MASS")
renv::status()
renv::snapshot()
install.packages("nnet")
renv::status()
renv::snapshot()
install.packages("fastDummies")
renv::snapshot()
# library(projpred)
library(cmdstanr)
