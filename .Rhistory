avg_individuals_per_village=15
),
list(
n_countries = 10,
avg_projects_per_country = 1,
avg_villages_per_project=10,
avg_individuals_per_village=10,
)
)
configs <- list(
list(
n_countries = 15,
avg_projects_per_country = 4,
avg_villages_per_project=10,
avg_individuals_per_village=15
),
list(
n_countries = 10,
avg_projects_per_country = 1,
avg_villages_per_project=10,
avg_individuals_per_village=10
)
)
temp_config <- configs[[i]]
test_df <- generate_simulated_data(
seed = 123,
mu = 10,
sigma = 4,
n_countries = temp_config$n_countries,
country_vpc = 0.4,
avg_projects_per_country = temp_config$avg_projects_per_country,
project_vpc=0.2,
project_imbalance = 0.25,
avg_villages_per_project = temp_config$avg_villages_per_project,
village_imbalance = 0.25,
village_vpc=0.1,
avg_individuals_per_village = temp_config$avg_individuals_per_village,
individual_imbalance = 0.25,
unexplained_vpc=0.3
)
test_df
colnames(test_df)
bf(individual_value ~ 1 +
(1 | country))
opt <- list(
iter=20,
warmup=10,
output="./outputs/test_overall_model_proj",
ncores=4,
index=1
)
opt <- list(
iter=20,
warmup=10,
output="./outputs/test_simulation",
ncores=4,
index=1
)
options(mc.cores = opt$ncores, brms.backend = "cmdstanr") # allows threading
opt$output <- gsub("/$", "", opt$output)
dir.create(opt$output)
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
dir.create(paste0(opt$output,"/simulation/"))
opt$index <- as.numeric(opt$index)
i <- opt$index
generate_simulated_data <- function(
seed=123,
n_countries,
mu=1,
sigma=0.25,
avg_projects_per_country,
project_imbalance=0.25,
avg_villages_per_project,
village_imbalance=0.25,
avg_individuals_per_village,
individual_imbalance=0.25,
project_vpc,
country_vpc,
village_vpc,
unexplained_vpc,
per_country_effect=NULL
){
if (
country_vpc+
project_vpc +
village_vpc +
unexplained_vpc!=1
){
stop("VPCs should add to one")
}
set.seed(seed)
countries <- paste0("country_",c(1:n_countries))
# Generating Projects and Countries
#-------------------------------------------
projects_per_country <- round(rnorm(n_countries,mean=
avg_projects_per_country,
sd =avg_projects_per_country * project_imbalance ),0)
projects_per_country[projects_per_country==0] <- 1
df <- lapply(c(1:length(countries)),function(i){
number_projects <- projects_per_country[i]
country_vec <- rep(countries[i],number_projects)
project_vec <- paste0(countries[i], "_proj_",c(1:number_projects))
return(tibble::as_tibble(list(
country=country_vec,
project=project_vec
)))
}) %>% bind_rows()
# Generating Villages
#-------------------------------------------
villages_per_project <-  round(rnorm(nrow(df),
mean=avg_villages_per_project,
sd =avg_villages_per_project * village_imbalance ),0)
villages_per_project[villages_per_project==0] <- 1
df <- lapply(c(1:length(df$project)),function(i){
country <- df$country[i]
project <- df$project[i]
number_villages <- villages_per_project[i]
country_vec <- rep(country,number_villages)
project_vec <- rep(project,number_villages)
village_vec <- paste0(project_vec,"_village_",c(1:number_villages))
return(tibble::as_tibble(list(
country=country_vec,
project=project_vec,
village=village_vec
)))
}) %>% bind_rows()
# Generating Individuals
#-------------------------------------------
individuals_per_village <-  round(rnorm(nrow(df),
mean=avg_individuals_per_village,
sd =avg_individuals_per_village * individual_imbalance ),0)
individuals_per_village[individuals_per_village==0] <- 1
df <- lapply(c(1:length(df$project)),function(i){
country <- df$country[i]
project <- df$project[i]
village <- df$village[i]
number_individuals <- individuals_per_village[i]
country_vec <- rep(country,number_individuals)
project_vec <- rep(project,number_individuals)
village_vec <- rep(village, number_individuals)
individual_vec <- paste0(village_vec,"_individual_",c(1:number_individuals))
return(tibble::as_tibble(list(
country=country_vec,
project=project_vec,
village=village_vec,
individual = individual_vec
)))
}) %>% bind_rows()
# Country Values
countries <- unique(df$country)
country_means <- rnorm(length(countries),mean = mu,sd = sigma*country_vpc)
country_means <- tibble::as_tibble(list(
country=countries,
country_value=country_means
))
df <- df %>% merge(country_means, by="country")
# Project_values
projects <- df[c("project","country_value")]
projects <- unique(projects)
project_means <- rnorm(nrow(projects),mean = projects$country_value,sd =project_vpc*sigma)
project_means <- tibble::as_tibble(list(
project=projects$project,
project_value=project_means
))
df <- df %>% merge(project_means, by="project")
# village values
villages <- df[c("village","project_value")]
villages <- unique(villages)
village_means <- rnorm(nrow(villages),mean = villages$project_value,sd =village_vpc*sigma)
village_means <- tibble::as_tibble(list(
village=villages$village,
village_value=village_means
))
df <- df %>% merge(village_means, by="village")
# individual values
individuals <- df[c("individual","village_value")]
individuals <- unique(individuals)
individual_values <- rnorm(nrow(individuals),mean = individuals$village_value,sd =unexplained_vpc*sigma)
individual_values <- tibble::as_tibble(list(
individual=individuals$individual,
individual_value=individual_values
))
df <- df %>% merge(individual_values, by="individual")
return(df)
}
configs <- list(
list(
n_countries = 15,
avg_projects_per_country = 4,
avg_villages_per_project=10,
avg_individuals_per_village=15
),
list(
n_countries = 10,
avg_projects_per_country = 1,
avg_villages_per_project=10,
avg_individuals_per_village=10
)
)
temp_config <- configs[[i]]
temp_config
dir.create(paste0(opt$output,"/simulation/simulation_",i))
write_csv(as_tibble(temp_config),paste0(opt$output,"/simulation/simulation_",i,"/config.csv"))
test_df <- generate_simulated_data(
seed = 123,
mu = 10,
sigma = 4,
n_countries = temp_config$n_countries,
country_vpc = 0.4,
avg_projects_per_country = temp_config$avg_projects_per_country,
project_vpc=0.2,
project_imbalance = 0.25,
avg_villages_per_project = temp_config$avg_villages_per_project,
village_imbalance = 0.25,
village_vpc=0.1,
avg_individuals_per_village = temp_config$avg_individuals_per_village,
individual_imbalance = 0.25,
unexplained_vpc=0.3
)
model <- brms::brm(formula =
bf(individual_value ~ 1 +
(1 | country)+
(1 | country:project)+
(1 | country:project:village)),
data = test_df,
prior = c(
set_prior('normal(0, 1)', class = 'sd'),
set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = opt$ncores,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=gaussian()
)
model
save(model,file=paste0(opt$output,"/simulation/simulation_",i,"/model.rda"))
r2_model <- bayes_R2(model)
r2_model
library(tibble)
library(readr)
opt <- list(
iter=20,
warmup=10,
data="./data/",
output="./outputs/test_overall_model_proj",
ncores=4,
index='1'
)
models <-  list(
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Weak Prior Model --------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# 1
list(
tag="weak_prior_fixed",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp +
# Levels
(1 | iso_country_code) +
(1 | iso_country_code:village)),
# (1 | id_form)),
prior="weak"
),
# 2
list(
tag="weak_prior_mixed_country",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp +
# Levels
(1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp | iso_country_code) +
(1 | iso_country_code:village)),
# (1 | id_form)),
prior="weak"),
# 3
list(
tag="weak_prior_mixed_village",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp +
# Levels
(1 | iso_country_code) +
(1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity | iso_country_code:village)),
# (1 | id_form)),
prior="weak"),
# 4
# list(
#   tag="weak_prior_mixed_form",
#   data=indicator_data,
#   formula=bf(log_tva ~ 1 +
#                #Household Level
#                education_cleaned +
#                log_livestock_tlu +
#                log_land_cultivated +
#                logit_off_farm_orientation +
#                logit_market_orientation +
#                logit_proportion_female_control+
#                log_income_diversity +
#
#                # Village Level
#                norm_growing_period +
#                log_min_travel_time +
#                #County Level
#                norm_gdl_lifexp +
#                # Levels
#                (1 | iso_country_code) +
#                (1 | iso_country_code:village)+
#                (1  +
#                   #Household Level
#                   education_cleaned +
#                   log_livestock_tlu +
#                   log_land_cultivated +
#                   logit_off_farm_orientation +
#                   logit_market_orientation +
#                   logit_proportion_female_control+
#                   log_income_diversity | id_form)),
#   prior="weak"),
#
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Horse Shoe Model --------------------------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# 5
list(
tag="horseshoe_fixed",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp +
# Levels
(1 | iso_country_code) +
(1 | iso_country_code:village)),
# (1 | id_form)),
prior="weak"
),
# 6
list(
tag="horseshoe_mixed_country",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp +
# Levels
(1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp | iso_country_code) +
(1 | iso_country_code:village)),
# (1 | id_form)),
prior="horseshoe"),
# 7
list(
tag="horseshoe_mixed_village",
data=indicator_data,
formula=bf(log_tva ~ 1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity +
# Village Level
norm_growing_period +
log_min_travel_time +
#County Level
norm_gdl_lifexp +
# Levels
(1 | iso_country_code) +
(1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity | iso_country_code:village)),
# (1 | id_form)),
prior="horseshoe")
# 8
# list(
#   tag="horseshoe_mixed_form",
#   data=indicator_data,
#   formula=bf(log_tva ~ 1 +
#                #Household Level
#                education_cleaned +
#                log_livestock_tlu +
#                log_land_cultivated +
#                logit_off_farm_orientation +
#                logit_market_orientation +
#                logit_proportion_female_control+
#                log_income_diversity +
#
#                # Village Level
#                norm_growing_period +
#                log_min_travel_time +
#                #County Level
#                norm_gdl_lifexp +
#                # Levels
#                (1 | iso_country_code) +
#                (1 | iso_country_code:village)+
#                (1  +
#                   #Household Level
#                   education_cleaned +
#                   log_livestock_tlu +
#                   log_land_cultivated +
#                   logit_off_farm_orientation +
#                   logit_market_orientation +
#                   logit_proportion_female_control+
#                   log_income_diversity | id_form)),
#   prior="horseshoe")
#
#
)
length(models)
