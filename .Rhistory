theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
ylim=c(0,1)
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
ylim(c(0,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
r2_all
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_line(aes(x=model_type, y=Estimate))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_abline(aes(x=model_type, y=Estimate))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_line(aes(x=model_type, y=Estimate))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
r2_all
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_line(aes(x=model_type, y=Estimate))+
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1),linetype="dashed")
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),,linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = "Baye",x="Levels Included", y=bquote('Bayesian'~(R^2)))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = "Baye",x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
bquote('Bayesian '~R^2)
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(paste0('Bayesian '~R^2), " for ..."),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = paste0(bquote('Bayesian '~R^2), " for ..."),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
bquote('Bayesian '~R^2)
?bquote
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote('Bayesian '~R^2 ' erasfre'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote('Bayesian '~R^2 ~' erasfre'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(~'Bayesian '~R^2 ~' erasfre'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5),linewidth=1)+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5),linewidth=1)+
scale_discrete_manual("linewidth", values = c("Confidence Interval"=1))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5),linewidth=1)+
scale_discrete_manual("linewidth", values = c("Confidence Interval"=1))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5,linewidth=1))+
scale_discrete_manual("linewidth", values = c("Confidence Interval"=1))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5,linewidth=1))+
scale_discrete_manual("linewidth", values = c("Confidence Interval"="1"))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5,linewidth="1"))+
scale_discrete_manual("linewidth", values = c("Confidence Interval"="1"))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5,linewidth="Confidence Interval"))+
scale_discrete_manual("linewidth", values = c("Confidence Interval"=1))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate),group=1,color="blue") +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5,linewidth="Confidence Interval"))+
scale_discrete_manual("linewidth", values = c("Confidence Interval"=1))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate,),group=1, color="blue") +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5,color="Confidence Interval"))+
geom_hline(yintercept = max(r2_all$Estimate,linetype="dashed"))+
scale_discrete_manual("linetype", values = c("Confidence Interval"="solid"))+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate,),group=1, color="blue") +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
guides(linetype = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid"))))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate,),group=1, color="blue") +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
theme(axis.text.x = element_text(angle=45,hjust=1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),x="Levels Included", y=bquote('Bayesian '~R^2))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate,),group=1, color="blue") +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),
x="Levels Included",
y=bquote('Bayesian '~R^2))+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,hjust=1))
r_2_comparison
r_2_comparison <- ggplot(r2_all)+
geom_point(aes(x=model_type, y=Estimate))+
geom_path(aes(x=model_type, y=Estimate,),group=1, color="blue") +
geom_segment(aes(x = model_type,xend=model_type,y=Q2.5,yend=Q97.5))+
geom_hline(yintercept = max(r2_all$Estimate),linetype="dashed")+
# ylim(c(0.25,1))+
labs(title = bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'),
x="Levels Included",
y=bquote('Bayesian '~R^2))+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,hjust=1))
ggsave("outputs/overall_model_results/location_only_tva/r2_summary.png",r_2_comparison)
ggsave("outputs/overall_model_results/location_only_tva/r2_summary.png",r_2_comparison, width=1000,height=800,units="px")
ggsave("outputs/overall_model_results/location_only_tva/r2_summary.png",r_2_comparison, width=1000,height=1500,units="px")
ggsave("outputs/overall_model_results/location_only_tva/r2_summary.png",r_2_comparison, width=1500,height=1500,units="px")
r2_files <- list.files("outputs/14_04_2023/outputs/overall_models/location_only/") %>% grep("^loo",x=., value=T)
loo_files <- list.files("outputs/14_04_2023/outputs/overall_models/location_only/") %>% grep("^loo",x=., value=T)
loo_files
x <- "loo_country_county_form"
loo_all <- sapply(loo_files, function(x){
loo_temp <- loadRData(paste0(
"outputs/14_04_2023/outputs/overall_models/location_only/",
x
))
loo_temp
},simplify=F)
loo_all
loo_all[1]
loo_all[2]
loo_compare(loo_all)
loo_compare(loo_all) %>% as_tibble()
loo_compare(loo_all) %>% tibble()
loo_compare
loo_compare(loo_all)
loo_compare(loo_all) %>% as_data_frame()
loo_compare(loo_all)
loo_compare
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare
loo_compare$model <- names(loo_all)
loo_compare$model
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare$model <- names(loo_all)
loo_compare$model <- gsub(".rda","",loo_compare$model,fixed=T)
loo_compare$model <- gsub("loo","",loo_compare$model,fixed=T)
loo_compare <- loo_compare[c("model","elpd_diff","se_diff")]
loo_compare
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare$model <- names(loo_all)
loo_compare$model <- gsub(".rda","",loo_compare$model,fixed=T)
loo_compare$model <- gsub("loo_","",loo_compare$model,fixed=T)
loo_compare <- loo_compare[c("model","elpd_diff","se_diff")]
loo_compare
loo_compare$elpd_diff <- round(loo_compare$elpd_diff,1)
loo_compare$se_diff <- round(loo_compare$se_diff,1)
loo_compare
loo_compare %>% flextable::flextable()
loo_compare_flextable <- loo_compare %>% flextable::flextable()
loo_compare_flextable
loo_all
loo_compare
loo_all <- sapply(loo_files, function(x){
loo_temp <- loadRData(paste0(
"outputs/14_04_2023/outputs/overall_models/location_only/",
x
))
loo_temp
},simplify=F)
loo_all
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare
loo_all
loo_all <- sapply(loo_files, function(x){
loo_temp <- loadRData(paste0(
"outputs/14_04_2023/outputs/overall_models/location_only/",
x
))
loo_temp
},simplify=F)
loo_all
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare
loo_compare(loo_all) %>% as_data_frame()
loo_compare(loo_all)
loo_all <- sapply(loo_files, function(x){
loo_temp <- loadRData(paste0(
"outputs/14_04_2023/outputs/overall_models/location_only/",
x
))
loo_temp
},simplify=F)
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare$model <- names(loo_all)
loo_compare$model <- gsub(".rda","",loo_compare$model,fixed=T)
loo_compare$model <- gsub("loo_","",loo_compare$model,fixed=T)
loo_compare <- loo_compare[c("model","elpd_diff","se_diff")]
loo_compare
loo_all <- sapply(loo_files, function(x){
loo_temp <- loadRData(paste0(
"outputs/14_04_2023/outputs/overall_models/location_only/",
x
))
loo_temp
},simplify=F)
names(loo_compare(loo_all))
loo_compare(loo_all)
?loo_compare
?loo_compare
loo_compare(loo_all,model_names = names(loo_all))
names(loo_all)
<- loo_compare(loo_all,model_names = names(loo_all))
loo_compare(loo_all,model_names = names(loo_all))
loo_compare(loo_all)
temp <- loo_compare(loo_all)
temp[1]
row.names(temp)
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare$model <- row.names(loo_compare(loo_all))
loo_compare$model <- gsub(".rda","",loo_compare$model,fixed=T)
loo_compare$model <- gsub("loo_","",loo_compare$model,fixed=T)
loo_compare <- loo_compare[c("model","elpd_diff","se_diff")]
loo_compare$elpd_diff <- round(loo_compare$elpd_diff,1)
loo_compare$se_diff <- round(loo_compare$se_diff,1)
loo_compare
loo_all <- sapply(loo_files, function(x){
loo_temp <- loadRData(paste0(
"outputs/14_04_2023/outputs/overall_models/location_only/",
x
))
loo_temp
},simplify=F)
loo_compare <- loo_compare(loo_all) %>% as_data_frame()
loo_compare$model <- row.names(loo_compare(loo_all))
loo_compare$model <- gsub(".rda","",loo_compare$model,fixed=T)
loo_compare$model <- gsub("loo_","",loo_compare$model,fixed=T)
loo_compare <- loo_compare[c("model","elpd_diff","se_diff")]
loo_compare$elpd_diff <- round(loo_compare$elpd_diff,1)
loo_compare$se_diff <- round(loo_compare$se_diff,1)
readr::write_csv(loo_compare,"outputs/overall_model_results/location_only_tva/loo_comparison.csv")
loo_compare_flextable <- loo_compare %>% flextable::flextable()
loo_compare_flextable
save_as_image(loo_compare_flextable, "outputs/overall_model_results/location_only_tva/loo_comparison.png")
library(flextable)
save_as_image(loo_compare_flextable, "outputs/overall_model_results/location_only_tva/loo_comparison.png")
?all_plots
all_plots
dir.create("outputs/overall_model_results/location_only_tva/country_village_form")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"Project"="sd_id_form__Intercept",
"Unexplained"="sigma"
)
country_village_form <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_village_form.rda")
model <- country_village_form
model_name <- "country_village_form"
params_list <- params_list
draws <- as_draws_array(model)
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list))
mcmc_scatter + stat_ellipse(level = 0.9, color = "gray20", size = 1)
mcmc_scatter
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list))
mcmc_scatter
mcmc_scatter + stat_ellipse(level = 0.9, color = "gray20", size = 1)
mcmc_scatter + stat_ellipse(level = 0.9, color = "gray20", size = 1)
mcmc_scatter + stat_density_2d(color = "black", size = .5)
library(readr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
library(tidybayes)
library(brms)
library(ggplot2)
library(bayesplot)
library(hexbin)
library(flextable)
mcmc_scatter + stat_density_2d(color = "black", size = .5)
mcmc_scatter <- mcmc_scatter + stat_density_2d(color = "black", size = .5)
mcmc_scatter
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list))
mcmc_scatter
source("~/research/phd/chapter-6-analysis/src/04-interpretation/02-overall-model.R", echo=TRUE)
model_name <- "weak_prior_fixed_effects"
indicator_data
#
#
opt <- list(
iter=20,
warmup=10,
data="./data/",
output="./outputs/test_overall_model_proj",
ncores=4,
index='1'
)
indicator_data <- readr::read_csv(paste0(opt$data,"/02-prepared-data/modelling_df.csv"))
indicator_data
indicator_data$logit_proportion_female_control
hist(indicator_data$logit_proportion_female_control)
hist(indicator_data$log_income_diversity)
log_livestock_tlu
hist(indicator_data$log_livestock_tlu)
hist(indicator_data$log_land_cultivated)
hist(indicator_data$logit_off_farm_orientation)
hist(indicator_data$logit_market_orientation)
hist(indicator_data$logit_proportion_female_control)
hist(indicator_data$log_income_diversity)
hist(indicator_data$norm_growing_period)
hist(indicator_data$log_min_travel_time)
hist(indicator_data$norm_gdl_lifexp)
