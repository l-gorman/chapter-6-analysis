cleaned_aggregation$`Cleaned Value`[duplicated(cleaned_aggregation$`Cleaned Value`)] <- NA
cleaned_aggregation$Total[is.na(cleaned_aggregation$`Cleaned Value`)] <- NA
above_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- cleaned_aggregation %>% flextable::flextable() %>%
flextable::bold( bold = TRUE, part="header") %>%
flextable::hline(i = above_row_selectors)  %>%
flextable::bold(i = bold_row_selectors,j = c("Cleaned Value", "Total"))
dir.create("./outputs/02-data-exploration/category_merging")
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/category_merging/education_merging.png")
library(readr)
library(dplyr)
library(tidyr)
library(tibble)
library(rhomis)
library(flextable)
rhomis_data <- readr::read_csv("data/01-raw-data/rhomis-data/rhomis/processed_data.csv", na=c("-999","NA", "n/a"))
indicator_data <- readr::read_csv("data/01-raw-data/rhomis-data/rhomis/indicator_data.csv", na=c("-999","NA", "n/a"))
indicator_data$beneficiary <- rhomis_data$beneficiary
indicator_data <- indicator_data %>% merge(rhomis_data,by="id_unique")
cols_to_remove <- grep("\\.y",colnames(indicator_data), value=T)
indicator_data <- indicator_data[colnames(indicator_data) %in% cols_to_remove==F]
colnames(indicator_data) <- gsub("\\.x","",colnames(indicator_data))
# indicator_data <- indicator_data %>% merge(rhomis_data[c("id_unique","x_gps_latitude", "x_gps_longitude")],by="id_unique")
# indicator_data <- indicator_data[!is.na(indicator_data$x_gps_latitude) & !is.na(indicator_data$x_gps_longitude),]
# indicator_data <- st_as_sf(indicator_data, coords = c("gps_lon_rounded", "gps_lat_rounded"),
# crs = 4326, agr = "constant", remove = F)
indicator_data$index <- c(1:nrow(indicator_data))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
# Extra Indicators --------------------------------------------------------
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
# Identifying categorical Variables ---------------------------------------
indicator_data$education_level <- indicator_data$head_education_level
education <- indicator_data %>% count(education_level)
education_conversion <- tribble(
~education_level, ~education_cleaned,
"no_answer",NA,
"no_school","pre_primary",
"none","pre_primary",
"enrolled_not_completed",   "pre_primary",
"illiterate",   "pre_primary",
"primary","primary",
"primary_1","primary",
"primary_2","primary",
"adult_education",   "primary",
"adult education, literacy school or parish school", "primary",
"1, alphabã©tisã©(moorã©)", "primary",
"1(ã©cole rurale)", "primary",
"1 5alphabetisã©", "primary",
"12 alphabã©tisã© (moorã©)", "primary",
"15alplabetisation", "primary",
"4, 5 alphabã©tisation en moorã©", "primary",
"5 alphabã©tisation", "primary",
"5 alphabã©tisation en moorã©", "primary",
"5alphabetisation", "primary",
"primarry_completed","primary",
"coranic",   "primary",
"islamic_school","primary",
"koranic_school","primary",
"religious_school","primary",
"literate","primary",
"secondary","secondary_or_higher",
"highschool_completed","secondary_or_higher",
"secondary_1","secondary_or_higher",
"secondary_2","secondary_or_higher",
"lower_secondary","secondary_or_higher",
"upper_secondary","secondary_or_higher",
"vocational","secondary_or_higher",
"technical","secondary_or_higher",
"college",   "secondary_or_higher",
"postsecondary","secondary_or_higher"
)
indicator_data <- indicator_data %>% base::merge(education_conversion,by="education_level",all.x=T,all.y=F) %>% as_tibble()
if (any(duplicated(indicator_data$index))){
stop("Duplicate row created during merge")
}
indicator_data$education_cleaned <- factor(indicator_data$education_cleaned, levels=unique(education_conversion$education_cleaned),
ordered = T)
cleaned_aggregation <-indicator_data[c("education_level","education_cleaned")] %>%
count(education_level,education_cleaned)
cleaned_aggregation <- na.omit(cleaned_aggregation)
cleaned_aggregation <- cleaned_aggregation[c("education_level","n","education_cleaned")]
colnames(cleaned_aggregation) <- c("Original Value", "Count", "Cleaned Value")
totals <- cleaned_aggregation %>% group_by(`Cleaned Value`) %>% summarise(Total=sum(Count))
cleaned_aggregation <- cleaned_aggregation %>% merge(totals,by="Cleaned Value",all.x=T,all.y=F) %>% as_tibble()
cleaned_aggregation <- cleaned_aggregation[c("Original Value","Count","Cleaned Value", "Total")]
cleaned_aggregation <- cleaned_aggregation[order(cleaned_aggregation$`Original Value`, cleaned_aggregation$`Cleaned Value`),]
cleaned_aggregation$`Cleaned Value`[duplicated(cleaned_aggregation$`Cleaned Value`)] <- NA
cleaned_aggregation$Total[is.na(cleaned_aggregation$`Cleaned Value`)] <- NA
above_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- cleaned_aggregation %>% flextable::flextable() %>%
flextable::bold( bold = TRUE, part="header") %>%
flextable::hline(i = above_row_selectors)  %>%
flextable::bold(i = bold_row_selectors,j = c("Cleaned Value", "Total"))
dir.create("./outputs/02-data-exploration/category_merging")
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/category_merging/education_merging.png")
assisted_tillage <- grepl("by_animal",indicator_data$tillage_power) |
grepl("by_machine",indicator_data$tillage_power)
assisted_tillage <- as.numeric(assisted_tillage)
indicator_data$assisted_tillage <- assisted_tillage
#labour
hired_labour <- grepl("hire_labour",indicator_data$farm_labour) |
grepl("reciprocal",indicator_data$farm_labour)
hired_labour <- as.numeric(hired_labour)
indicator_data$external_labour <- hired_labour
inputs <- rhomis::split_string_categories_to_dummy(indicator_data$agric_inputs,seperator = " ")
fertilisers <- c("fertilisers","npk","urea","dap","micro_dose_fertilisers","microbial_fert")
use_fert <- rowSums(inputs[fertilisers], na.rm = T)>0
indicator_data$use_fert <- as.numeric(use_fert)
debts_have <- indicator_data$debts_have
debts_have[debts_have=="dont_know"] <- NA
debts_have[debts_have=="no_answer"] <- NA
debts_have <- debts_have=="y"
debts_have <- as.numeric(debts_have)
indicator_data$debts_have <- debts_have
indicator_data$debts_have[is.na(indicator_data$debts_have)] <- 0
kitchen_garden <- indicator_data$homegarden
kitchen_garden[kitchen_garden=="y"] <- TRUE
kitchen_garden[kitchen_garden=="n"] <- FALSE
kitchen_garden[kitchen_garden=="no_answer"] <- NA
temp_kg <- rep(FALSE,length(kitchen_garden))
temp_kg[kitchen_garden=="TRUE"] <- TRUE
temp_kg[kitchen_garden=="FALSE"] <- FALSE
temp_kg[is.na(kitchen_garden)] <- NA
indicator_data$kitchen_garden <- as.numeric(temp_kg)
table(indicator_data$household_type)
aidreceived <- indicator_data$aidreceived
aidreceived[aidreceived=="dont_know"] <- NA
aidreceived[aidreceived=="no_answer"] <- NA
aidreceived <- aidreceived=="y"
aidreceived <- as.numeric(aidreceived)
indicator_data$aidreceived <- aidreceived
indicator_data$aidreceived[is.na(indicator_data$aidreceived)] <- 0
livestock_inputs_use <- indicator_data$livestock_inputs_use
livestock_inputs_use[livestock_inputs_use=="no_answer"] <- NA
livestock_inputs_use <- livestock_inputs_use=="y"
livestock_inputs_use <- as.numeric(livestock_inputs_use)
livestock_inputs_use[is.na(indicator_data$livestock_all)] <- 0
indicator_data$livestock_inputs_any <- livestock_inputs_use
indicator_data$livestock_inputs_any[is.na(indicator_data$livestock_inputs_any)] <- 0
land_irrigated <- indicator_data$land_irrigated
land_irrigated[land_irrigated=="no_answer"] <- NA
land_irrigated[land_irrigated=="dont_know"] <- NA
land_irrigated[land_irrigated=="none"] <- "n"
land_irrigated[land_irrigated%in%c("all","half","little","most","underhalf")] <- "y"
land_irrigated <- land_irrigated=="y"
land_irrigated <- as.numeric(land_irrigated)
indicator_data$land_irrigated_any <- land_irrigated
indicator_data$land_irrigated_any[is.na(indicator_data$land_irrigated_any)] <- 0
indicator_data$hdds_lean_season <- indicator_data$hdds_bad_season
indicator_data$hdds_lean_season[is.na(indicator_data$hdds_bad_season)&!is.na(indicator_data$hdds_last_month)] <- indicator_data$hdds_last_month[is.na(indicator_data$hdds_bad_season)&!is.na(indicator_data$hdds_last_month)]
# plain_crop_diversity <- rowSums(!is.na(crop_price_and_value[[1]]))
crop_incomes <- map_to_wide_format(indicator_data,
name_column = "crop_name",
column_prefixes = c("crop_sold_income"),
types=c("num"))
number_of_crop_incomes <- rowSums(!is.na(crop_incomes[[1]]))
livestock_incomes <-  map_to_wide_format(indicator_data,
name_column = "livestock_name",
column_prefixes = c(
"livestock_sale_income",
"meat_sold_income",
"milk_sold_income",
"eggs_sold_income",
"bees_honey_sold_income"),
types=c("num","num","num","num","num"))
number_livestock_incomes <- lapply(livestock_incomes, function(x){
rowSums(!is.na(x))
}) %>% bind_cols() %>% rowSums()
off_farm_income <- map_to_wide_format(indicator_data,
name_column = "offfarm_income_name",
column_prefixes = c("offfarm_income_name"),
types=c("chr"))[["offfarm_income_name"]]
number_off_farm_incomes <-  rowSums(!is.na(off_farm_income))
number_income_sources <- number_of_crop_incomes+number_livestock_incomes+number_off_farm_incomes
indicator_data$number_income_sources <- number_income_sources
# Improved Breeds
livestock_column_loop_number <- rhomis::find_number_of_loops(indicator_data,name_column = "livestock_breeds")
loop_columns <- paste0("livestock_breeds_",c(1:livestock_column_loop_number))
breeds_data <- indicator_data[loop_columns]
improved_breeds <- lapply(breeds_data, function(x) {
as.numeric(grepl("improved",x) |   grepl("exotic",x))
}
) %>%
bind_cols() %>%
rowSums(., na.rm=T)
find_loop_number_and_extract_values(indicator_data, "livestock_breeds")
# Tva per hh per year (LCU)
subset_columns <- c("total_income_lcu_per_year","value_farm_products_consumed_lcu_per_hh_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$tva_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$tva_per_hh_per_year[na.rows] <- NA
# Tva per mae per day in PPP
subset_columns <- c("tva_per_hh_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$tva_per_mae_per_day_ppp <- indicator_data$tva_per_hh_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
indicator_data$tva_per_mae_per_day_ppp[na.rows] <- NA
per_proj_conv_prop_tibble <- make_per_project_conversion_tibble(indicator_data$id_rhomis_dataset,proportion_conversions)
off_farm_prop <- switch_units(data_to_convert = indicator_data$offfarm_income_proportion,unit_tibble = per_proj_conv_prop_tibble,id_vector = indicator_data$id_rhomis_dataset)
off_farm_prop[indicator_data$offfarm_incomes_any=="n"] <- 0
indicator_data$off_farm_any <- as.numeric(off_farm_prop>0)
# Farm income per hh per year (LCU)
subset_columns <- c("crop_income_lcu_per_year","livestock_income_lcu_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$value_farm_products_sold_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$value_farm_products_sold_per_hh_per_year[na.rows] <- NA
indicator_data$livestock_tlu[indicator_data$livestock_owners=="n" & !is.na(indicator_data$livestock_owners)] <- 0
# Market orientation
subset_columns <- c("value_farm_products_sold_per_hh_per_year","tva_per_hh_per_year")
indicator_data$market_orientation <- indicator_data[["value_farm_products_sold_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
variable_summary <- function(
df,
variable,
description,
level,
criteria,
criteria_description,
actions,
justification
){
df[[variable]][is.infinite(df[[variable]])] <- NA
summary <- list(
Variable=variable,
Min=round(min(df[[variable]],na.rm=T),2),
Max=round(max(df[[variable]],na.rm=T),2),
Mean=round(mean(df[[variable]],na.rm=T),2),
SD=round(sd(df[[variable]],na.rm=T),2),
Q.01=round(quantile(df[[variable]],probs=c(0.01),na.rm=T),2),
Q.05=round(quantile(df[[variable]],probs=c(0.05),na.rm=T),2),
Q.95=round(quantile(df[[variable]],probs=c(0.95),na.rm=T),2),
Q.99=round(quantile(df[[variable]],probs=c(0.99),na.rm=T),2)
) %>% as_tibble()
if(length(criteria)>1){
summary_addition <- list(
Variable=rep(NA,length(criteria)-1),
Min=rep(NA,length(criteria)-1),
Max=rep(NA,length(criteria)-1),
Mean=rep(NA,length(criteria)-1),
SD=rep(NA,length(criteria)-1),
Q.01=rep(NA,length(criteria)-1),
Q.05=rep(NA,length(criteria)-1),
Q.95=rep(NA,length(criteria)-1),
Q.99=rep(NA,length(criteria)-1)
)%>% as_tibble()
summary <- bind_rows(summary,summary_addition)
}
exclusion_list <- list()
for (i in 1:length(criteria)){
temp_function <- criteria[[i]]
result <- temp_function(df[[variable]])
number_of_values <- table(result)["TRUE"]
if (is.na(number_of_values)){
number_of_values <- 0
}
exclusion_list[[i]] <-list(
Criteria=criteria_description[[i]],
Action=actions[[i]],
Justification=justification[[i]],
Count=as.numeric(number_of_values)
)
}
exclusion_list <- bind_rows(exclusion_list)
summary <- bind_cols(summary,exclusion_list)
return(summary)
}
hh_size_summary <-variable_summary(
df=indicator_data,
variable="hh_size_mae",
description="Number of Household Members in MAE",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>30}),
criteria_description=c("Null Value", "Zero Value","Above 30 MAE"),
actions=c("Exclude", "Exclude", "Exclude"),
justification=c(
"Houeshold must have a size to be considered a household",
"Household cannot be considered if it has no members",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tlu_summary <-variable_summary(
df=indicator_data,
variable="livestock_tlu",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x>1000}),
criteria_description=c("Null Value", "Below 100 TLU"),
actions=c("NAs will be converted to 0","Excluded"),
justification=c(
"",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tva_summary <-variable_summary(
df=indicator_data,
variable="tva_per_mae_per_day_ppp",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>10000}),
criteria_description=c("Null Value", "Zero Value","Reported than 10,000 (PPP$/MAE/Day)"),
actions=c("Excluded","Excluded","Excluded"),
justification=c(
"Value a key performance indicator",
"Household has to have at least some farm produce",
"Less than 1% of households above this amount. Likely that farming household not earning this much per person per day"
)
)
exclusion_summary <- bind_rows(
hh_size_summary,
tlu_summary,
tva_summary
)
exclusion_summary
indicator_data$hh_size_mae
indicator_data$land_cultivated_ha
indicator_data$off_farm_any
is.na(indicator_data$hh_size_mae)
indicator_data$land_cultivated_ha
vars <- c("hh_size_mae",
"education_cleaned",
"livestock_tlu",
"land_cultivated_ha",
"off_farm_any",
"market_orientation",
"assisted_tillage",
"external_labour",
"debts_have",
"use_fert",
"number_income_sources",
"livestock_inputs_any",
"land_irrigated_any",
"kitchen_garden",
"tva_per_mae_per_day_ppp",
"hdds_lean_season")
indicator_data[vars]
table(complete.cases(indicator_data[vars]))
modelling_df <- indicator_data
projects_to_exclude <- c(
"GT_S4N_2015",
"HN_S4N_2015",
"SV_S4N_2015",
"TZ_GLV_2017",
"BF_CIR_2018",
"BF_TA5_2018",
"ET_TA6_2018",
"NI_CFN_2018",
"EC_AID_2019",
"ET_SRL_2019",
"KE_SRL_2019",
"TZ_SRL_2019",
"VN_NT1_2019",
"MA_CRD_2019",
"NG_IIT_2020",
"ML_MB2_2020",
"UG_CRP_2020",
"KE_STP_2020",
"ZA_NEO_2020",
"VN_NT3_2020",
"UG_NUT_2020",
"VN_CRP_2020",
"BF_UPS_2020",
"ET_PCS_2020",
"MA_CRD_2020",
"UG_PCS_2020",
"ET_ARI_2022",
"GT_CAT_2022",
"BF_EC3_2022",
"ML_MC3_2022",
"NE_NA6_2022",
"BI_PRD_2022",
"BI_SNV_2022",
"ET_ECO_2023",
"KM_DHA_2021",
"PH_USM_2022",
"VN_NT2_2019",
"ZM_FA2_2019"
)
projects_with_control_groups <- c(
"MW_CFG_2015",
"IN_CM3_2016",
"GH_TA2_2017",
"IN_BIO_2018",
"ET_ARI_2018",
"RW_OAF_2018",
"ET_TA9_2019",
"GH_ADN_2019",
"NE_T11_2019",
"ET_CAF_2020"
)
modelling_df$id_form %in% tolower(projects_to_exclude)==F
crit_1 <- (modelling_df$id_form %in% tolower(projects_to_exclude)==F )
table(crit_1)
crit_2 <-  (is.na(modelling_df$beneficiary) | modelling_df$beneficiary %in% c("control","n","core","no_participation","non_beneficiary"))
table(crit_1&crit_2)
crit_1 <- (modelling_df$id_form %in% tolower(projects_to_exclude))
table(crit_1)
crit_2 <-  (is.na(modelling_df$beneficiary) | modelling_df$beneficiary %in% c("control","n","core","no_participation","non_beneficiary"))
table(crit_1&crit_2)
# Missing GPS Coordinates
crit_3 <- is.na(modelling_df$x_gps_latitude)|
is.na(modelling_df$x_gps_longitude) |
is.na(modelling_df$village)
table(crit_1&crit_2&crit_3)
crit_1
crit_1_n <- count(crit_1==T)
crit_1_n <- sum(crit_1)
crit_1_n
crit_2_n <- sum(crit_2==T & crit_1==F )
crit_2_n
crit_2
crit_2==T & crit_1==F
table(modelling_df$beneficiary)
table(is.na(modelling_df$beneficiary))
# Control Participants
crit_2 <-  (!is.na(modelling_df$beneficiary) & modelling_df$beneficiary %in% c("control","n","core","none","no_participation","non_beneficiary")==F)
table(crit_1&crit_2)
crit_2_n <- sum(crit_2==T & crit_1==F)
crit_2_n
# Missing GPS Coordinates
crit_3 <- is.na(modelling_df$x_gps_latitude)|
is.na(modelling_df$x_gps_longitude) |
is.na(modelling_df$village)
table(crit_1&crit_2&crit_3)
crit_3_n <- sum(crit_3==T & crit_2==F & crit_1==F)
crit_3_n
table(is.na(modelling_df$x_gps_latitude))
table(is.na(modelling_df$x_gps_longitude))
table(is.na(modelling_df$village))
table(crit_3)
crit_4 <- complete.cases(indicator_data[vars])==F
crit_4
table(crit_1&crit_2&crit_3 & crit_4)
table(crit_1|crit_2|crit_3|crit_4)
table(crit_4)
colSums(is.na(indicator_data[vars]))
crit_1_n
crit_2_n
crit_3_n
crit_4_n <- sum(crit_4 == Tcrit_3==F & crit_2==F & crit_1==F)
crit_4_n <- sum(crit_4 == T crit_3==F & crit_2==F & crit_1==F)
crit_4_n <- sum(crit_4 == T & crit_3==F & crit_2==F & crit_1==F)
crit_4_n
table(crit_1&crit_2&crit_3&crit_4)
table(crit_1|crit_2|crit_3|crit_4)
outliers <- modelling_df$land_cultivated_ha<200 &
modelling_df$hh_size_mae<50&
modelling_df$livestock_tlu<1000&
modelling_df$tva_per_mae_per_day_ppp<10000
crit_4 <- complete.cases(indicator_data[vars])==F
crit_4_n <- sum(crit_4 == T & crit_3==F & crit_2==F & crit_1==F)
crit_4_n
table(crit_1|crit_2|crit_3|crit_4)
crit_5_n <- sum(crit_5 & crit_4 == F & crit_3==F & crit_2==F & crit_1==F)
crit_5_n <- sum(crit_5==T & crit_4 == F & crit_3==F & crit_2==F & crit_1==F)
crit_5_n
crit_5 <- modelling_df$land_cultivated_ha>200 &
modelling_df$hh_size_mae>50&
modelling_df$livestock_tlu>1000&
modelling_df$tva_per_mae_per_day_ppp>10000
crit_5_n <- sum(crit_5==T & crit_4 == F & crit_3==F & crit_2==F & crit_1==F)
crit_5_n
crit_5 <- modelling_df$land_cultivated_ha>200 |
modelling_df$hh_size_mae>50|
modelling_df$livestock_tlu>1000|
modelling_df$tva_per_mae_per_day_ppp>10000
crit_5_n <- sum( crit_5==T & crit_4 == F & crit_3==F & crit_2==F & crit_1==F)
crit_5_n
final_modelling_df <- indicator_data[
crit_1==F&
crit_2==F&
crit_3==F&
crit_4==F&
crit_5==F&,
crit_1==F&
crit_2==F
final_modelling_df <- indicator_data[
crit_1==F&
crit_2==F&
crit_3==F&
crit_4==F&
crit_5==F,
]
final_modelling_df
nrow(final_modelling_df)
table(final_modelling_df$iso_country_code)
table(final_modelling_df$id_form[crit_3])
source("~/research/phd/chapter-6-analysis/src/01-data-preperation/00-cleaning.R")
crit_1_n
crit_2_n
crit_3_n
# Missing GPS Coordinates
crit_3 <- is.na(modelling_df$x_gps_latitude)|
is.na(modelling_df$x_gps_longitude) |
is.na(modelling_df$village)
table(crit_1&crit_2&crit_3)
table(crit_3)
table(is.na(modelling_df$gps_lat))
table(is.na(modelling_df$gps_lon))
table(is.na(modelling_df$x_gps_latitude))
table(indicator_data$id_form[is.na(modelling_df$village)])
