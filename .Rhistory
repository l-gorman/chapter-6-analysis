df=modelling_data_set,
variable="min_travel_time",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>2880}),
criteria_description=c("Null Value", "Travel time more than 48 hours"),
actions=c("Exclude","Exclude"),
justification=c(
"NAs will removed",
"Unlikely more than 48 hours travel time to closest town"
)
)
hdi_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_shdi",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>1}),
criteria_description=c("Null Value", "More than 1"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Proportional measure, cannot be greater than 1"
)
)
life_expect_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_lifexp",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>100}),
criteria_description=c("Null Value", "Value more than 100 unrealistic"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Life expectancy greater than"
)
)
exclusion_summary <- bind_rows(
hh_size_summary,
tlu_summary,
tva_summary,
growing_period_summary,
travel_time_summary,
hdi_summary,
life_expect_summary,
)
readr::write_csv(exclusion_summary,"./outputs/02-data-exploration/numeric_variable_exclusion_summary.csv")
above_row_selectors <- which(!is.na(exclusion_summary$Variable))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
# bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- exclusion_summary %>% flextable::flextable() %>%
bold( bold = TRUE, part="header") %>%
hline(i = above_row_selectors)  %>%
bold(j = c("Variable", "Count"))
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/numeric_variable_exclusion_summary.png")
#-------------------------------------------------------------------------
# variable_summary -------------------------------------------------------
#-------------------------------------------------------------------------
variable_summary <- tribble(
~Category,~Variable, ~`Data Type`, ~Level, ~Description,~`Reason for Inclusion`,
"Grouping Variables","id_form","categorical","Household-Level","","",
"Grouping Variables","gdlcode","categorical","Household-Level","","",
"Grouping Variables","iso_country_code","categorical","Household-Level","","",
"Grouping Variables","village","categorical","Household-Level","","",
"Demographics","hh_size_mae","continuous","Household-Level","","",
"Demographics","education_cleaned","continuous","Household-Level","","",
"Resource Endowment","livestock_tlu","continuous","Household-Level","","", # centered transform
"Resource Endowment","land_cultivated_ha","continuous","Household-Level","","",
"Production Orientation","livestock_orientation","proportion","Household-Level","","", #logit transform
"Production Orientation","crop_orientation","proportion","Household-Level","","", #logit transform
"Production Orientation","off_farm_orientation","proportion","Household-Level","","", #logit transform
"Production Orientation","market_orientation","proportion","Household-Level","","", # logit transform
"Production Orientation","weighted_income_diversity","continuous","Household-Level","","", # centred transform
# Village Level Variables
"Village Variables","adjusted_length_growing_period","continuous","Village Level","","", # centered transform
"Village Variables","min_travel_time","continuous","Village Level","","", # centered transform
"Village Variables","aez_class_cleaned","categorical","Village Level","","",
# Country Level Variables
"County Descriptors","gdl_lifexp","continuous","County","","",
"County Descriptors","gdl_shdi","proportion","County","","",
"Performance Indicators","tva_per_mae_per_day_ppp","continuous","Household Level","","", # centered transform
"Performance Indicators","combined_fs_score","ordinal","Household Level","",""
)
readr::write_csv(variable_summary,"./outputs/02-data-exploration/variable_summary.csv")
# Transformation ----------------------------------------------------------
log_add_half_min <- function(x){
replacement <- min(x[x>0 & !is.na(x)])/2
x[x==0] <- replacement
return(log(x))
}
logit <- function(x){
min_replacement <- min(x[x>0 & x<1 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0 & x<1 & !is.na(x)]))/2
x[x==0] <- min_replacement
x[x==1] <- 1-max_replacement
return(log(x/(1 - x)))
}
normalisation <- function(x){
return((x - mean(x)) / sd(x))
}
modelling_data_set$livestock_tlu[ is.na(modelling_data_set$livestock_tlu)] <- 0
modelling_data_set <- modelling_data_set[modelling_data_set$hh_size_mae>0 & !is.na(modelling_data_set$hh_size_mae),]
modelling_data_set <- modelling_data_set[modelling_data_set$tva_per_mae_per_day_ppp>0 & !is.na(modelling_data_set$tva_per_mae_per_day_ppp),]
modelling_data_set <- modelling_data_set[complete.cases(modelling_data_set),]
modelling_data_set <- modelling_data_set[
modelling_data_set$hh_size_mae<30&
modelling_data_set$livestock_tlu<30&
modelling_data_set$tva_per_mae_per_day_ppp<10000&
modelling_data_set$min_travel_time<2880
,]
# HHsize Standardisation (Log)
modelling_data_set$log_hh_size <- log_add_half_min(modelling_data_set$hh_size_mae)
modelling_data_set$log_hh_size <- normalisation(modelling_data_set$log_hh_size)
# Livestock TLU (Log)
modelling_data_set$log_livestock_tlu <- log_add_half_min(modelling_data_set$livestock_tlu)
modelling_data_set$log_livestock_tlu <- normalisation(modelling_data_set$livestock_tlu)
# Land Cultivated (Log)
modelling_data_set$log_land_cultivated <- log_add_half_min(modelling_data_set$land_cultivated_ha)
modelling_data_set$log_land_cultivated <- normalisation(modelling_data_set$log_land_cultivated)
# Livestock Orientation (Logit)
modelling_data_set$logit_livestock_orientation <- logit(modelling_data_set$livestock_orientation)
modelling_data_set$logit_livestock_orientation <- normalise(modelling_data_set$logit_livestock_orientation)
# Crop Orientation (Logit)
modelling_data_set$logit_crop_orientation <- logit(modelling_data_set$crop_orientation)
modelling_data_set$logit_crop_orientation <- normalise(modelling_data_set$logit_crop_orientation)
# Off Farm Orientation (Logit)
modelling_data_set$logit_off_farm_orientation <- logit(modelling_data_set$off_farm_orientation)
modelling_data_set$logit_off_farm_orientation <- normalise(modelling_data_set$logit_off_farm_orientation)
# Market Orientation (Logit)
modelling_data_set$market_orientation
# Market Orientation (Logit)
modelling_data_set$logit_market_orientation <- logit(modelling_data_set$market_orientation)
x <- modelling_data_set$market_orientation
min_replacement <- min(x[x>0 & x<1 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0 & x<1 & !is.na(x)]))/2
min_replacement
max_replacement <- (1-max(x[x>0 & x<1 & !is.na(x)]))/2
max_replacement
log(5.551115e-17)
1 - x
log(x/(1 - x))
x
x[x==0] <- min_replacement
x[x==1] <- 1-max_replacement
log(x/(1 - x))
min_replacement <- min(x[x>0.000001 & x<0.999999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.000001 & x<0.999999 & !is.na(x)]))/2
min_replacement
x <- modelling_data_set$market_orientation
min_replacement <- min(x[x>0.000001 & x<0.999999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.000001 & x<0.999999 & !is.na(x)]))/2
min_replacement
max_replacement
x[x==0] <- min_replacement
x[x==1] <- 1-max_replacement
log(x/(1 - x))
min_replacement
max_replacement
1-max_replacement
min_replacement
log(x/(1 - x))
table(is.na(log(x/(1 - x))))
min_replacement <- min(x[x>0.00001 & x<0.99999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.00001 & x<0.99999 & !is.na(x)]))/2
x[x==0] <- min_replacement
x[x==1] <- 1-max_replacement
log(x/(1 - x))
table(is.na(log(x/(1 - x))))
x[is.na(log(x/(1 - x)))]
max_replacement
1-max_replacement
x <- 1-max_replacement
log(x/(1 - x))
x <- modelling_data_set$market_orientation
min_replacement <- min(x[x>0.0001 & x<0.9999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.0001 & x<0.9999 & !is.na(x)]))/2
x[x==0] <- min_replacement
x[x==1] <- 1-max_replacement
log(x/(1 - x))
min_replacement <- min(x[x>0.001 & x<0.999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.001 & x<0.999 & !is.na(x)]))/2
min_replacement <- min(x[x>0.001 & x<0.999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.001 & x<0.999 & !is.na(x)]))/2
x[x<0.001] <- min_replacement
x[x>0.999] <- 1-max_replacement
log(x/(1 - x))
min_replacement <- min(x[x>0.000001 & x<0.999999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.000001 & x<0.999999 & !is.na(x)]))/2
x[x<0.001] <- min_replacement
x[x>0.999] <- 1-max_replacement
return(log(x/(1 - x)))
source("~/research/phd/chapter-6-analysis/src/02-data-exploration/04-aggregating-categories.R")
hist(modelling_data_set$log_livestock_tlu)
source("~/research/phd/chapter-6-analysis/src/02-data-exploration/04-aggregating-categories.R")
ggsave("./outputs/02-data-exploration/var_pairplot.png",plot = pair_plot,width = 4000,height=4000,units = "px")
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
indicator_data <- readr::read_csv(paste0(opt$data,"/02-prepared-data/modelling_df.csv"))
indicator_data
project_ids
project_id <- project_ids[opt$proj]
project_ids <- unique(indicator_data$id_form)
project_id <- project_ids[opt$proj]
project_id
opt$proj
project_id <- project_ids[as.numeric(opt$proj)]
project_id
library(brms)
bf
indicator_data$combined_fs_score
unique(indicator_data$combined_fs_score)
colnames(indicator_data)
subset_df
indicator_data$log_tva
guassian()
guassian
?brm
library(brms)
# library(ggplot2)
# library(ggridges)
library(dplyr)
library(tidyr)
# library(ggdist)
library(magrittr)
library(optparse)
library(fastDummies)
# library(projpred)
library(cmdstanr)
horseshoe_food_sec <- brm(
formula=combined_fs_score ~ 1 +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("horseshoe(1)", class="b"),# HorseShoe
set_prior('normal(0, 1)', class = 'sd'),
set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=cumulative("logit")
)
subset_df
indicator_data <- readr::read_csv(paste0(opt$data,"/02-prepared-data/modelling_df.csv"))
project_id <- unique(indicator_data$id_form)[as.numeric(opt$proj)]
subset_df <- indicator_data[indicator_data$id_form==project_id,]
subset_df$combined_fs_score <- factor(indicator_data$combined_fs_score,
levels=c("severely_fi","moderately_fi","mildly_fi","not_fi"),
ordered = T)
subset_df$combined_fs_score <- factor(subset_df$combined_fs_score,
levels=c("severely_fi","moderately_fi","mildly_fi","not_fi"),
ordered = T)
project_id
opt$output
dir.create(paste0(opt$output,"/",project_id))
horseshoe_food_sec <- brm(
formula=combined_fs_score ~ 1 +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("horseshoe(1)", class="b"),# HorseShoe
set_prior('normal(0, 1)', class = 'sd'),
set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=cumulative("logit")
)
horseshoe_food_sec <- brm(
formula=combined_fs_score ~ 1 +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("horseshoe(1)", class="b"),# HorseShoe
set_prior('normal(0, 1)', class = 'sd'),
# set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=cumulative("logit")
)
horseshoe_food_sec
subset_df$education_cleaned
horseshoe_food_sec <- brm(
formula=combined_fs_score ~ 1 +
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("horseshoe(1)", class="b"),# HorseShoe
set_prior('normal(0, 1)', class = 'sd'),
# set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=cumulative("logit")
)
horseshoe_food_sec
horseshoe_tva <- brm(
formula=log_tva ~ 1 +
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("horseshoe(1)", class="b"),# HorseShoe
set_prior('normal(0, 1)', class = 'sd'),
set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=guassian()
)
# sbatch src/bc-run-scripts/run_brms_anova_location_per_country.sh  -i 5000 -w 2000 -n 4 -o brms_anova_21_03_2023
library(brms)
# library(ggplot2)
# library(ggridges)
library(dplyr)
library(tidyr)
# library(ggdist)
library(magrittr)
library(optparse)
library(fastDummies)
# library(projpred)
library(cmdstanr)
horseshoe_tva <- brm(
formula=log_tva ~ 1 +
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("horseshoe(1)", class="b"),# HorseShoe
set_prior('normal(0, 1)', class = 'sd'),
set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=gaussian()
)
horseshoe_tva
weak_prior_food_sec <- brm(
formula=combined_fs_score ~ 1 +
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_livestock_orientation +
logit_crop_orientation +
logit_off_farm_orientation +
logit_market_orientation +
log_income_diversity +
norm_growing_period +
log_min_travel_time +
aez_class_cleaned +
norm_gdl_lifexp +
logit_gdl_hdi +
(1 | iso_country_code) +
(1 | iso_country_code:gdlcode) +
(1 | iso_country_code:gdlcode:village),
data = subset_df,
prior = c(
set_prior("normal(0, 1)", class = "b"),
set_prior('normal(0, 1)', class = 'sd'),
# set_prior('normal(0, 1)', class = 'sigma'),
set_prior('normal(0, 1)', class = 'Intercept')
),
cores = 4,
backend = "cmdstanr",
iter = opt$iter,
warmup = opt$warmup,
family=cumulative("logit")
)
indicator_data
indicator_data %>%
group_by(id_form) %>%
summarise(gdlcode=n_distinct(gdlcode),
village=n_distinct(village))
colnames(indicator_data)
summary_per_proj <- indicator_data %>%
group_by(id_form) %>%
summarise(gdlcode=n_distinct(gdlcode),
village=n_distinct(village),
aez_class_cleaned=n_distinct(aez_class_cleaned),
education_cleaned=n_distinct(education_cleaned))
View(summary_per_proj)
library(readr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
model <- loadRData("./outputs/14_04_2023/outputs/bf_adn_2019/horseshoe_food_sec.rda")
plot(model)
model <- loadRData("./outputs/14_04_2023/outputs/bf_adn_2019/horseshoe_tva.rda")
plot(model)
as_draws(model)
model <- loadRData("./outputs/14_04_2023/outputs/bf_adn_2019/horseshoe_food_sec.rda")
model
summary(model)
as.data.frame(summary(model))
library(tidybayes)
install.packages("tidybayes")
as_draws_df(model)
