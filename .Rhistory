livestock_value,
meat_value,
milk_value,
eggs_value,
honey_value,
off_farm_value)
indicator_data$weighted_income_diversity <- apply(value_matrix,1,diversity_index)
return( indicator_data)
}
indicator_data <- diversity(indicator_data)
# Livestock Orientation, Market Orientation ----------------------------------------
subset_columns <- c("total_income_lcu_per_year","value_farm_products_consumed_lcu_per_hh_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$tva_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$tva_per_hh_per_year[na.rows] <- NA
# Removing any households with zero value
# indicator_data <- indicator_data[!is.na(indicator_data$tva_per_hh_per_year) & indicator_data$tva_per_hh_per_year>0,]
subset_columns <- c("tva_per_hh_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$tva_per_mae_per_day_ppp <- indicator_data$tva_per_hh_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
indicator_data$tva_per_mae_per_day_ppp[na.rows] <- NA
subset_columns <- c("total_income_lcu_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$income_per_mae_per_day_ppp <- indicator_data$total_income_lcu_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
indicator_data$income_per_mae_per_day_ppp[na.rows] <- NA
subset_columns <- c("crop_income_lcu_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$crop_income_per_mae_per_day_ppp <- indicator_data$crop_income_lcu_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
indicator_data$crop_income_per_mae_per_day_ppp[na.rows] <- NA
subset_columns <- c("crop_income_lcu_per_year","value_crop_consumed_lcu_per_hh_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$crop_value_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$crop_value_per_hh_per_year[na.rows] <- NA
subset_columns <- c("livestock_income_lcu_per_year","value_livestock_products_consumed_lcu_per_hh_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$livestock_value_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$livestock_value_per_hh_per_year[na.rows] <- NA
subset_columns <- c("crop_income_lcu_per_year","livestock_income_lcu_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$value_farm_products_sold_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$value_farm_products_sold_per_hh_per_year[na.rows] <- NA
subset_columns <- c("livestock_value_per_hh_per_year","tva_per_hh_per_year")
indicator_data$livestock_orientation <- indicator_data[["livestock_value_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
subset_columns <- c("crop_value_per_hh_per_year","tva_per_hh_per_year")
indicator_data$crop_orientation <- indicator_data[["crop_value_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
subset_columns <- c("off_farm_income_lcu_per_year","tva_per_hh_per_year")
indicator_data$off_farm_orientation <- indicator_data[["off_farm_income_lcu_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
subset_columns <- c("value_farm_products_sold_per_hh_per_year","tva_per_hh_per_year")
indicator_data$market_orientation <- indicator_data[["value_farm_products_sold_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
vars <- c(
"id_form",
"id_unique",
"gdlcode",
"iso_country_code",
"village",
"hh_size_mae",
"education_cleaned",
"livestock_tlu", # centered transform
"land_cultivated_ha",
"livestock_orientation", #logit transform
"crop_orientation", #logit transform
"off_farm_orientation", #logit transform
"market_orientation", # logit transform
"weighted_income_diversity", # centred transform
"tva_per_mae_per_day_ppp", # centered transform
"combined_fs_score",
# Village Level Variables
"adjusted_length_growing_period", # centered transform
"min_travel_time", # centered transform
"aez_class_cleaned",
# Country Level Variables
"gdl_lifexp",
"gdl_shdi"
)
modelling_data_set <- indicator_data[vars]
# Thresholds and transformations
# normalise <- function(x){
#   return(x-mean(x)/sd(x))
# }
# tva_summary <- modelling_data_set %>%
#   group_by(id_form) %>%
#   summarise(
#     mean_tva=mean(tva_per_mae_per_day_ppp,na.rm=T),
#     median_tva=median(tva_per_mae_per_day_ppp,na.rm=T)
#
#   )
variable_summary <- function(
df,
variable,
description,
level,
criteria,
criteria_description,
actions,
justification
){
df[[variable]][is.infinite(df[[variable]])] <- NA
summary <- list(
Variable=variable,
Min=min(df[[variable]],na.rm=T),
Max=max(df[[variable]],na.rm=T),
Mean=mean(df[[variable]],na.rm=T),
SD=sd(df[[variable]],na.rm=T),
Q.01=quantile(df[[variable]],probs=c(0.01),na.rm=T),
Q.05=quantile(df[[variable]],probs=c(0.05),na.rm=T),
Q.95=quantile(df[[variable]],probs=c(0.95),na.rm=T),
Q.99=quantile(df[[variable]],probs=c(0.99),na.rm=T)
) %>% as_tibble()
if(length(criteria)>1){
summary_addition <- list(
Variable=rep(NA,length(criteria)-1),
Min=rep(NA,length(criteria)-1),
Max=rep(NA,length(criteria)-1),
Mean=rep(NA,length(criteria)-1),
SD=rep(NA,length(criteria)-1),
Q.01=rep(NA,length(criteria)-1),
Q.05=rep(NA,length(criteria)-1),
Q.95=rep(NA,length(criteria)-1),
Q.99=rep(NA,length(criteria)-1)
)%>% as_tibble()
summary <- bind_rows(summary,summary_addition)
}
exclusion_list <- list()
for (i in 1:length(criteria)){
temp_function <- criteria[[i]]
result <- temp_function(df[[variable]])
number_of_values <- table(result)["TRUE"]
if (is.na(number_of_values)){
number_of_values <- 0
}
exclusion_list[[i]] <-list(
Criteria=criteria_description[[i]],
Action=actions[[i]],
Justification=justification[[i]],
Count=as.numeric(number_of_values)
)
}
exclusion_list <- bind_rows(exclusion_list)
summary <- bind_cols(summary,exclusion_list)
return(summary)
}
hh_size_summary <-variable_summary(
df=modelling_data_set,
variable="hh_size_mae",
description="Number of Household Members in MAE",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>30}),
criteria_description=c("Null Value", "Zero Value","Above 30 MAE"),
actions=c("Exclude", "Exclude", "Exclude"),
justification=c(
"Houeshold must have a size to be considered a household",
"Household cannot be considered if it has no members",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tlu_summary <-variable_summary(
df=modelling_data_set,
variable="livestock_tlu",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x>30}),
criteria_description=c("Null Value", "Below 30 TLU"),
actions=c("NAs will be converted to 0","Excluded"),
justification=c(
"",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tva_summary <-variable_summary(
df=modelling_data_set,
variable="tva_per_mae_per_day_ppp",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>10000}),
criteria_description=c("Null Value", "Zero Value","Reported than 10,000 (PPP$/MAE/Day)"),
actions=c("Excluded","Excluded","Excluded"),
justification=c(
"Value a key performance indicator",
"Household has to have at least some farm produce",
"Less than 1% of households above this amount. Likely that farming household not earning this much per person per day"
)
)
growing_period_summary <-variable_summary(
df=modelling_data_set,
variable="adjusted_length_growing_period",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>365}),
criteria_description=c("Null Value", "Growing period of more than 365 days"),
actions=c("Exclude", "Exclude"),
justification=c(
"Cannot have no growing period",
"Cannot have growing period of more than 365 days"
)
)
travel_time_summary <-variable_summary(
df=modelling_data_set,
variable="min_travel_time",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>2880}),
criteria_description=c("Null Value", "Travel time more than 48 hours"),
actions=c("Exclude","Exclude"),
justification=c(
"NAs will removed",
"Unlikely more than 48 hours travel time to closest town"
)
)
hdi_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_shdi",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>1}),
criteria_description=c("Null Value", "More than 1"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Proportional measure, cannot be greater than 1"
)
)
life_expect_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_lifexp",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>100}),
criteria_description=c("Null Value", "Value more than 100 unrealistic"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Life expectancy greater than"
)
)
exclusion_summary <- bind_rows(
hh_size_summary,
tlu_summary,
tva_summary,
growing_period_summary,
travel_time_summary,
hdi_summary,
life_expect_summary,
)
readr::write_csv(exclusion_summary,"./outputs/02-data-exploration/numeric_variable_exclusion_summary.csv")
above_row_selectors <- which(!is.na(exclusion_summary$Variable))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
# bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- exclusion_summary %>% flextable::flextable() %>%
bold( bold = TRUE, part="header") %>%
hline(i = above_row_selectors)  %>%
bold(j = c("Variable", "Count"))
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/numeric_variable_exclusion_summary.png")
#-------------------------------------------------------------------------
# variable_summary -------------------------------------------------------
#-------------------------------------------------------------------------
variable_summary <- tribble(
~Category,~Variable, ~`Data Type`, ~Level, ~Description,~`Reason for Inclusion`,
"Grouping Variables","id_form","categorical","Household-Level","","",
"Grouping Variables","gdlcode","categorical","Household-Level","","",
"Grouping Variables","iso_country_code","categorical","Household-Level","","",
"Grouping Variables","village","categorical","Household-Level","","",
"Demographics","hh_size_mae","continuous","Household-Level","","",
"Demographics","education_cleaned","continuous","Household-Level","","",
"Resource Endowment","livestock_tlu","continuous","Household-Level","","", # centered transform
"Resource Endowment","land_cultivated_ha","continuous","Household-Level","","",
"Production Orientation","livestock_orientation","proportion","Household-Level","","", #logit transform
"Production Orientation","crop_orientation","proportion","Household-Level","","", #logit transform
"Production Orientation","off_farm_orientation","proportion","Household-Level","","", #logit transform
"Production Orientation","market_orientation","proportion","Household-Level","","", # logit transform
"Production Orientation","weighted_income_diversity","continuous","Household-Level","","", # centred transform
# Village Level Variables
"Village Variables","adjusted_length_growing_period","continuous","Village Level","","", # centered transform
"Village Variables","min_travel_time","continuous","Village Level","","", # centered transform
"Village Variables","aez_class_cleaned","categorical","Village Level","","",
# Country Level Variables
"County Descriptors","gdl_lifexp","continuous","County","","",
"County Descriptors","gdl_shdi","proportion","County","","",
"Performance Indicators","tva_per_mae_per_day_ppp","continuous","Household Level","","", # centered transform
"Performance Indicators","combined_fs_score","ordinal","Household Level","",""
)
readr::write_csv(variable_summary,"./outputs/02-data-exploration/variable_summary.csv")
# Transformation ----------------------------------------------------------
log_add_half_min <- function(x){
replacement <- min(x[x>0 & !is.na(x)])/2
x[x==0] <- replacement
return(log(x))
}
logit <- function(x){
min_replacement <- min(x[x>0.000001 & x<0.999999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.000001 & x<0.999999 & !is.na(x)]))/2
x[x<0.001] <- min_replacement
x[x>0.999] <- 1-max_replacement
return(log(x/(1 - x)))
}
normalisation <- function(x){
return((x - mean(x)) / sd(x))
}
modelling_data_set$livestock_tlu[ is.na(modelling_data_set$livestock_tlu)] <- 0
modelling_data_set <- modelling_data_set[modelling_data_set$hh_size_mae>0 & !is.na(modelling_data_set$hh_size_mae),]
modelling_data_set <- modelling_data_set[modelling_data_set$tva_per_mae_per_day_ppp>0 & !is.na(modelling_data_set$tva_per_mae_per_day_ppp),]
modelling_data_set <- modelling_data_set[complete.cases(modelling_data_set),]
modelling_data_set <- modelling_data_set[
modelling_data_set$hh_size_mae<30&
modelling_data_set$livestock_tlu<30&
modelling_data_set$tva_per_mae_per_day_ppp<10000&
modelling_data_set$min_travel_time<2880
,]
modelling_data_set$log_hh_size <- log_add_half_min(modelling_data_set$hh_size_mae)
modelling_data_set$log_hh_size <- normalisation(modelling_data_set$log_hh_size)
# Livestock TLU (Log)
modelling_data_set$log_livestock_tlu <- log_add_half_min(modelling_data_set$livestock_tlu)
modelling_data_set$log_livestock_tlu <- normalisation(modelling_data_set$log_livestock_tlu)
# Land Cultivated (Log)
modelling_data_set$log_land_cultivated <- log_add_half_min(modelling_data_set$land_cultivated_ha)
modelling_data_set$log_land_cultivated <- normalisation(modelling_data_set$log_land_cultivated)
# Livestock Orientation (Logit)
modelling_data_set$logit_livestock_orientation <- logit(modelling_data_set$livestock_orientation)
hist(modelling_data_set$logit_livestock_orientation)
hist(modelling_data_set$livestock_orientation)
modelling_data_set$logit_livestock_orientation <- normalise(modelling_data_set$logit_livestock_orientation)
normalisation <- function(x){
return((x - mean(x)) / sd(x))
}
modelling_data_set$logit_livestock_orientation <- normalisation(modelling_data_set$logit_livestock_orientation)
hist(modelling_data_set$logit_livestock_orientation)
hist(modelling_data_set$livestock_orientation)
hist(modelling_data_set$logit_livestock_orientation)
livestock_binary <- modelling_data_set$livestock_orientation > 0.3
livestock_binary
table(livestock_binary)
livestock_binary <- modelling_data_set$livestock_orientation > 0.2
table(livestock_binary)
# Income diversity (Log)
modelling_data_set$log_income_diversity <- log_add_half_min(modelling_data_set$weighted_income_diversity)
modelling_data_set$log_income_diversity <- normalisation(modelling_data_set$log_income_diversity)
hist(modelling_data_set$log_income_diversity)
# Income diversity (Log)
modelling_data_set$log_income_diversity <- log_add_half_min(modelling_data_set$weighted_income_diversity)
modelling_data_set$log_income_diversity <- normalisation(modelling_data_set$log_income_diversity)
hist(modelling_data_set$log_income_diversity )
# TVA (Log)
modelling_data_set$log_tva <- log_add_half_min(modelling_data_set$tva_per_mae_per_day_ppp)
modelling_data_set$log_tva <- normalisation(modelling_data_set$log_tva)
hist(modelling_data_set$log_tva )
# Length Growing Period (Norm)
modelling_data_set$norm_growing_period <- normalisation(modelling_data_set$adjusted_length_growing_period)
# Variance Reduction Comparisons ------------------------------------------
dir.create("outputs/overall_model_results/model_comparison")
params_list <- list(
"Project"="sd_id_form__Intercept",
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"Unexplained"="sigma"
)
draws_df <- as_draws_df(location_only_tva)[as.character(params_list)]
library(readr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
library(tidybayes)
library(brms)
library(ggplot2)
library(bayesplot)
library(hexbin)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
vpc <- function(model, params){
draws_df <-  as_draws_df(model)[params]
vpcs <- list()
for (param in params){
other_params <- params[params!=param]
vpcs[[param]] <- draws_df[[param]]^2/rowSums(draws_df[params]^2)
}
vpcs <- vpcs %>% as_tibble()
return(vpcs)
}
summarise_estimates <- function(draws_df, params_list){
# draws_df$Total <- rowSums(draws_df)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draw_summary <- rbind(draws.66,draws.95)
clean_names <- names(params_list)[match(draw_summary$key,as.character(params_list))]
# clean_names <- c("Total",names(params_list))[match(draw_summary$key,c("Total",as.character(params_list)))]
draw_summary$key <- clean_names
return(draw_summary)
}
estimates_plot <- function(draws_df,
params_list,
title,
sort=F
){
draw_summary <-summarise_estimates(draws_df,
params_list)
draw_summary$key <- factor(draw_summary$key,
levels=names(params_list),
ordered = T)
draw_summary$level <- factor(draw_summary$level, levels=c("0.66 Level","0.95 Level"),ordered = T)
if (sort==T){
factor_order <- draw_summary$key[order(draw_summary$Estimate[draw_summary$level=="0.66 Level"])]
draw_summary$key <- factor(draw_summary$key, levels=factor_order,ordered = T)
}
plot <- ggplot(draw_summary, aes(y = key,x=Estimate,shape="Estimate"))+
geom_point(show.legend = T,size=3)+
geom_segment(aes(y=key,yend=key,x=min,xend=max,linewidth=level))+
scale_discrete_manual("linewidth", values = c("0.95 Level"=0.75, "0.66 Level"=1.5))+
labs(x="Estimate", y="", title=title)+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid", "solid"))),
shape=guide_legend(title="")) +
theme(plot.title = element_text(hjust=0.5))
return(plot)
}
get_random_effects <- function(model,
variable_of_interest,
title,
sort=T,
prefix="r_id_form"){
# model <-weak_prior_tva_random
# variable_of_interest <- "norm_growing_period"
# prefix="r_id_form"
all_vars <- get_variables(model)
random_vars <- all_vars[grepl(paste0("^",prefix),all_vars) & grepl(variable_of_interest,all_vars)]
clean_vars <- gsub(".*\\[","",random_vars)
clean_vars <- gsub(",.*","",clean_vars)
params_list <- setNames(as.list(random_vars), clean_vars)
draws_df <- as_draws_df(model)[as.character(random_vars)]
plot <- estimates_plot(draws_df,
params_list,
title,
sort=sort)
return(plot)
}
source("~/research/phd/chapter-6-analysis/src/04-interpretation/02-overall-model.R", echo=TRUE)
params_list <- list(
"Project"="sd_id_form__Intercept",
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"Unexplained"="sigma"
)
#MCMC Pair plots
draws <- as_draws_array(weak_prior_tva_random)
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list),off_diag_fun = "hex")
mcmc_scatter
ggsave(filename = "outputs/overall_model_results/tva_random_effects/mcmc_scatter.png",
plot = mcmc_scatter,width = 5000,height=3500,units = "px")
params_list
hist(modelling_data_set$logit_crop_orientation)
# Crop Orientation (Logit)
modelling_data_set$logit_crop_orientation <- logit(modelling_data_set$crop_orientation)
modelling_data_set$logit_crop_orientation <- normalisation(modelling_data_set$logit_crop_orientation)
hist(modelling_data_set$logit_crop_orientation)
hist(modelling_data_set$crop_orientation)
hist(modelling_data_set$logit_off_farm_orientation)
# Off Farm Orientation (Logit)
modelling_data_set$logit_off_farm_orientation <- logit(modelling_data_set$off_farm_orientation)
modelling_data_set$logit_off_farm_orientation <- normalisation(modelling_data_set$logit_off_farm_orientation)
hist(modelling_data_set$logit_off_farm_orientation)
hist(modelling_data_set$off_farm_orientation)
# Off Farm Orientation (Logit)
modelling_data_set$logit_off_farm_orientation <- logit(modelling_data_set$off_farm_orientation)
modelling_data_set$logit_off_farm_orientation <- normalisation(modelling_data_set$logit_off_farm_orientation)
hist(modelling_data_set$logit_off_farm_orientation)
# Market Orientation (Logit)
modelling_data_set$logit_market_orientation <- logit(modelling_data_set$market_orientation)
modelling_data_set$logit_market_orientation <- normalisation(modelling_data_set$logit_market_orientation)
hist(modelling_data_set$market_orientation)
hist(modelling_data_set$logit_market_orientation)
# TVA (Log)
modelling_data_set$log_tva <- log_add_half_min(modelling_data_set$tva_per_mae_per_day_ppp)
modelling_data_set$log_tva <- normalisation(modelling_data_set$log_tva)
hist(modelling_data_set$log_tv)
hist(modelling_data_set$log_tva)
