# Country Level Variables
"gdl_lifexp",
"gdl_shdi"
)
modelling_data_set <- indicator_data[vars]
variable_summary <- function(
df,
variable,
description,
level,
criteria,
criteria_description,
actions,
justification
){
df[[variable]][is.infinite(df[[variable]])] <- NA
summary <- list(
Variable=variable,
Min=min(df[[variable]],na.rm=T),
Max=max(df[[variable]],na.rm=T),
Mean=mean(df[[variable]],na.rm=T),
SD=sd(df[[variable]],na.rm=T),
Q.01=quantile(df[[variable]],probs=c(0.01),na.rm=T),
Q.05=quantile(df[[variable]],probs=c(0.05),na.rm=T),
Q.95=quantile(df[[variable]],probs=c(0.95),na.rm=T),
Q.99=quantile(df[[variable]],probs=c(0.99),na.rm=T)
) %>% as_tibble()
if(length(criteria)>1){
summary_addition <- list(
Variable=rep(NA,length(criteria)-1),
Min=rep(NA,length(criteria)-1),
Max=rep(NA,length(criteria)-1),
Mean=rep(NA,length(criteria)-1),
SD=rep(NA,length(criteria)-1),
Q.01=rep(NA,length(criteria)-1),
Q.05=rep(NA,length(criteria)-1),
Q.95=rep(NA,length(criteria)-1),
Q.99=rep(NA,length(criteria)-1)
)%>% as_tibble()
summary <- bind_rows(summary,summary_addition)
}
exclusion_list <- list()
for (i in 1:length(criteria)){
temp_function <- criteria[[i]]
result <- temp_function(df[[variable]])
number_of_values <- table(result)["TRUE"]
if (is.na(number_of_values)){
number_of_values <- 0
}
exclusion_list[[i]] <-list(
Criteria=criteria_description[[i]],
Action=actions[[i]],
Justification=justification[[i]],
Count=as.numeric(number_of_values)
)
}
exclusion_list <- bind_rows(exclusion_list)
summary <- bind_cols(summary,exclusion_list)
return(summary)
}
hh_size_summary <-variable_summary(
df=modelling_data_set,
variable="hh_size_mae",
description="Number of Household Members in MAE",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>30}),
criteria_description=c("Null Value", "Zero Value","Above 30 MAE"),
actions=c("Exclude", "Exclude", "Exclude"),
justification=c(
"Houeshold must have a size to be considered a household",
"Household cannot be considered if it has no members",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tlu_summary <-variable_summary(
df=modelling_data_set,
variable="livestock_tlu",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x>30}),
criteria_description=c("Null Value", "Below 30 TLU"),
actions=c("NAs will be converted to 0","Excluded"),
justification=c(
"",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tva_summary <-variable_summary(
df=modelling_data_set,
variable="tva_per_mae_per_day_ppp",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>10000}),
criteria_description=c("Null Value", "Zero Value","Reported than 10,000 (PPP$/MAE/Day)"),
actions=c("Excluded","Excluded","Excluded"),
justification=c(
"Value a key performance indicator",
"Household has to have at least some farm produce",
"Less than 1% of households above this amount. Likely that farming household not earning this much per person per day"
)
)
growing_period_summary <-variable_summary(
df=modelling_data_set,
variable="adjusted_length_growing_period",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>365}),
criteria_description=c("Null Value", "Growing period of more than 365 days"),
actions=c("Exclude", "Exclude"),
justification=c(
"Cannot have no growing period",
"Cannot have growing period of more than 365 days"
)
)
travel_time_summary <-variable_summary(
df=modelling_data_set,
variable="min_travel_time",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>2880}),
criteria_description=c("Null Value", "Travel time more than 48 hours"),
actions=c("Exclude","Exclude"),
justification=c(
"NAs will removed",
"Unlikely more than 48 hours travel time to closest town"
)
)
hdi_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_shdi",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>1}),
criteria_description=c("Null Value", "More than 1"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Proportional measure, cannot be greater than 1"
)
)
life_expect_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_lifexp",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>100}),
criteria_description=c("Null Value", "Value more than 100 unrealistic"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Life expectancy greater than"
)
)
exclusion_summary <- bind_rows(
hh_size_summary,
tlu_summary,
tva_summary,
growing_period_summary,
travel_time_summary,
hdi_summary,
life_expect_summary,
)
readr::write_csv(exclusion_summary,"./outputs/02-data-exploration/numeric_variable_exclusion_summary.csv")
above_row_selectors <- which(!is.na(exclusion_summary$Variable))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
# bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- exclusion_summary %>% flextable::flextable() %>%
bold( bold = TRUE, part="header") %>%
hline(i = above_row_selectors)  %>%
bold(j = c("Variable", "Count"))
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/numeric_variable_exclusion_summary.png")
#-------------------------------------------------------------------------
# variable_summary -------------------------------------------------------
#-------------------------------------------------------------------------
library(brms)
# library(ggplot2)
# library(ggridges)
library(dplyr)
library(tidyr)
# library(ggdist)
library(magrittr)
library(optparse)
library(fastDummies)
# library(projpred)
library(cmdstanr)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
opt <- list(
output="./outputs/14_04_2023/outputs/"
)
options(mc.cores = opt$ncores, brms.backend = "cmdstanr") # allows threading
opt$data <- gsub("/$", "", opt$data)
opt$output <- gsub("/$", "", opt$output)
dir.create(opt$output)
country_only <- loadRData(paste0(opt$output,"/overall_models/location_only/country_only.rda"))
country_only
loo_country_only <- loo(country_only)
country_only <- loadRData("outputs/14_04_2023/overall_models/location_only/country_only.rda")
library(readr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
library(tidybayes)
library(brms)
library(ggplot2)
library(bayesplot)
library(hexbin)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
country_only <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_only.rda")
country_county <- loadRData("/overall_models/location_only/country_county.rda")
country_only <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_only.rda")
country_county <- loadRData("/overall_models/location_only/country_county.rda")
country_county <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_county.rda")
county_country_village <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village.rda")
county_country_village_kg <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village_kg.rda")
county_country_village_kg_form <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village_kg_form.rda")
county_country_village_kg
all_plots
all_plots <- function(model,
model_name,
param_list){
draws <- as_draws_array(model)
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list),off_diag_fun = "hex")
ggsave(filename = paste0("outputs/overall_model_results/",model_name,"/mcmc_scatter.png"),
plot = mcmc_scatter,width = 5000,height=3500,units = "px")
# Variable Estimate
draws_df <- as_draws_df(model)[as.character(params_list)]
estimate_plot <- estimates_plot(draws_df = draws_df,params_list = params_list,
title=paste0("Estimates for ",model_name," TVA Model")
)
ggsave(filename = paste0("outputs/overall_model_results/",model_name,"/location_estimates.png"),
plot = estimate_plot,width = 1800,height=1200,units = "px")
# VPC Estimates
vpcs <- vpc(model,as.character(params_list))
vpc_estimates <- estimates_plot(draws_df = vpcs,params_list = params_list,
title=paste0("VPCs for ",model_name," TVA Model")
)
ggsave(filename = paste0("outputs/overall_model_results/",model_name,"/location_vpcs.png"),
plot = vpc_estimates,width = 1800,height=1200,units = "px")
}
all_plots(country_only,country_only,params_list)
library(readr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
library(tidybayes)
library(brms)
library(ggplot2)
library(bayesplot)
library(hexbin)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
vpc <- function(model, params){
draws_df <-  as_draws_df(model)[params]
vpcs <- list()
for (param in params){
other_params <- params[params!=param]
vpcs[[param]] <- draws_df[[param]]^2/rowSums(draws_df[params]^2)
}
vpcs <- vpcs %>% as_tibble()
return(vpcs)
}
summarise_estimates <- function(draws_df, params_list){
# draws_df$Total <- rowSums(draws_df)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draw_summary <- rbind(draws.66,draws.95)
clean_names <- names(params_list)[match(draw_summary$key,as.character(params_list))]
# clean_names <- c("Total",names(params_list))[match(draw_summary$key,c("Total",as.character(params_list)))]
draw_summary$key <- clean_names
return(draw_summary)
}
estimates_plot <- function(draws_df,
params_list,
title,
sort=F
){
draw_summary <-summarise_estimates(draws_df,
params_list)
draw_summary$key <- factor(draw_summary$key,
levels=names(params_list),
ordered = T)
draw_summary$level <- factor(draw_summary$level, levels=c("0.66 Level","0.95 Level"),ordered = T)
if (sort==T){
factor_order <- draw_summary$key[order(draw_summary$Estimate[draw_summary$level=="0.66 Level"])]
draw_summary$key <- factor(draw_summary$key, levels=factor_order,ordered = T)
}
plot <- ggplot(draw_summary, aes(y = key,x=Estimate,shape="Estimate"))+
geom_point(show.legend = T,size=3)+
geom_segment(aes(y=key,yend=key,x=min,xend=max,linewidth=level))+
scale_discrete_manual("linewidth", values = c("0.95 Level"=0.75, "0.66 Level"=1.5))+
labs(x="Estimate", y="", title=title)+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid", "solid"))),
shape=guide_legend(title="")) +
theme(plot.title = element_text(hjust=0.5))
return(plot)
}
get_random_effects <- function(model,
variable_of_interest,
title,
sort=T,
prefix="r_id_form"){
# model <-weak_prior_tva_random
# variable_of_interest <- "norm_growing_period"
# prefix="r_id_form"
all_vars <- get_variables(model)
random_vars <- all_vars[grepl(paste0("^",prefix),all_vars) & grepl(variable_of_interest,all_vars)]
clean_vars <- gsub(".*\\[","",random_vars)
clean_vars <- gsub(",.*","",clean_vars)
params_list <- setNames(as.list(random_vars), clean_vars)
draws_df <- as_draws_df(model)[as.character(random_vars)]
plot <- estimates_plot(draws_df,
params_list,
title,
sort=sort)
return(plot)
}
dir.create("outputs/overall_model_results/")
dir.create("outputs/overall_model_results/location_only_tva/")
all_plots <- function(model,
model_name,
param_list){
draws <- as_draws_array(model)
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list),off_diag_fun = "hex")
ggsave(filename = paste0("outputs/overall_model_results/",model_name,"/mcmc_scatter.png"),
plot = mcmc_scatter,width = 5000,height=3500,units = "px")
# Variable Estimate
draws_df <- as_draws_df(model)[as.character(params_list)]
estimate_plot <- estimates_plot(draws_df = draws_df,params_list = params_list,
title=paste0("Estimates for ",model_name," TVA Model")
)
ggsave(filename = paste0("outputs/overall_model_results/",model_name,"/location_estimates.png"),
plot = estimate_plot,width = 1800,height=1200,units = "px")
# VPC Estimates
vpcs <- vpc(model,as.character(params_list))
vpc_estimates <- estimates_plot(draws_df = vpcs,params_list = params_list,
title=paste0("VPCs for ",model_name," TVA Model")
)
ggsave(filename = paste0("outputs/overall_model_results/",model_name,"/location_vpcs.png"),
plot = vpc_estimates,width = 1800,height=1200,units = "px")
}
# Country Only ----
dir.create("outputs/overall_model_results/location_only_tva/country_only")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"Unexplained"="sigma"
)
country_only <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_only.rda")
all_plots(country_only,country_only,params_list)
all_plots <- function(model,
model_name,
param_list){
draws <- as_draws_array(model)
mcmc_scatter <- mcmc_pairs(draws,pars = as.character(params_list),off_diag_fun = "hex")
ggsave(filename = paste0("outputs/overall_model_results/location_only_tva/",model_name,"/mcmc_scatter.png"),
plot = mcmc_scatter,width = 5000,height=3500,units = "px")
# Variable Estimate
draws_df <- as_draws_df(model)[as.character(params_list)]
estimate_plot <- estimates_plot(draws_df = draws_df,params_list = params_list,
title=paste0("Estimates for ",model_name," TVA Model")
)
ggsave(filename = paste0("outputs/overall_model_results/location_only_tva/",model_name,"/location_estimates.png"),
plot = estimate_plot,width = 1800,height=1200,units = "px")
# VPC Estimates
vpcs <- vpc(model,as.character(params_list))
vpc_estimates <- estimates_plot(draws_df = vpcs,params_list = params_list,
title=paste0("VPCs for ",model_name," TVA Model")
)
ggsave(filename = paste0("outputs/overall_model_results/location_only_tva/",model_name,"/location_vpcs.png"),
plot = vpc_estimates,width = 1800,height=1200,units = "px")
}
dir.create("outputs/overall_model_results/location_only_tva/country_only")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"Unexplained"="sigma"
)
country_only <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_only.rda")
all_plots(country_only,country_only,params_list)
model_name
all_plots(country_only,"country_only",params_list)
dir.create("outputs/overall_model_results/location_only_tva/country_county")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Unexplained"="sigma"
)
country_county <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/country_county.rda")
all_plots(country_county,"country_county",params_list)
dir.create("outputs/overall_model_results/location_only_tva/country_county_village")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"Unexplained"="sigma"
)
county_country_village <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village.rda")
all_plots(county_country_village,"county_country_village",params_list)
dir.create("outputs/overall_model_results/location_only_tva/country_county_village")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"Unexplained"="sigma"
)
county_country_village <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village.rda")
all_plots(county_country_village,"country_county_village",params_list)
dir.create("outputs/overall_model_results/location_only_tva/country_county_village_kg")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"KG Class"="kg_class_name",
"Unexplained"="sigma"
)
country_county_village_kg <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village_kg.rda")
all_plots(county_country_village,"country_county_village_kg",params_list)
country_county_village_kg
all_plots(country_county_village_kg,"country_county_village_kg",params_list)
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"KG Class"="kg_class_name",
"Unexplained"="sigma"
)
country_county_village_kg <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village_kg.rda")
all_plots(country_county_village_kg,"country_county_village_kg",params_list)
country_county_village_kg
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"KG Class"="sd_kg_class_name__Intercept",
"Unexplained"="sigma"
)
all_plots(country_county_village_kg,"country_county_village_kg",params_list)
country_county_village_kg
# Country County Village KG Class Form -------------------------------------------------------
dir.create("outputs/overall_model_results/location_only_tva/country_county_village_kg_form")
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"KG Class"="kg_class_name",
"Project"="sd_id_form__Intercept",
"Unexplained"="sigma"
)
country_county_village_kg_form <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village_kg_form.rda")
all_plots(country_county_village_kg_form,"country_county_village_kg_form",params_list)
params_list <- list(
"Country"="sd_iso_country_code__Intercept",
"County"="sd_iso_country_code:gdlcode__Intercept",
"Village"="sd_iso_country_code:gdlcode:village__Intercept",
"KG Class"="sd_kg_class_name__Intercept",
"Project"="sd_id_form__Intercept",
"Unexplained"="sigma"
)
country_county_village_kg_form <- loadRData("outputs/14_04_2023/outputs/overall_models/location_only/county_country_village_kg_form.rda")
all_plots(country_county_village_kg_form,"country_county_village_kg_form",params_list)
country_county_village_kg_form
bayes_R2(#Household Level)
bayes_R2(country_county_village_kg_form)
bayes_R2(country_county)
bayes_R2(country_county_village_kg_form)
?loo
