hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot_df$size <- ifelse(plot_df$model %in% candidate_models,2,1)
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=4,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=4,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot_df$size <- ifelse(plot_df$model %in% candidate_models,2,1)
plot_df$size
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=4,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=4,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_continuous(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_continuous(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot_df$size <- ifelse(plot_df$model %in% candidate_models,1.5,1)
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_continuous(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot_df$size <- ifelse(plot_df$model %in% candidate_models,1,1)
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_continuous(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot_df$size <- ifelse(plot_df$model %in% candidate_models,1.25,1)
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_continuous(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot_df$size <- ifelse(plot_df$model %in% candidate_models,10,15)
plot_df$size <- ifelse(plot_df$model %in% candidate_models,15,10)
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=size))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_continuous(guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=shape))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(values =c('Candidate Model'=2,'Other Model'=1),guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=shape))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(values =c('Candidate Model'=4,'Other Model'=2),guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=shape))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape,size=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=18,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(values =c('Candidate Model'=3,'Other Model'=1.5),guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=shape))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape,size=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=4,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(values =c('Candidate Model'=3,'Other Model'=1.5),guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
dual_axis_plot <- function(loo_table,
r2_table,
title,
base_output_path,
candidate_models
){
plot_df <- bind_cols(loo_table,r2_table)
if (all(plot_df$model==plot_df$model_type)==F){
stop("Mismatched rows")
}
max_r2_axis <- max(plot_df$Estimate)
max_elpd_axis <- abs(min(plot_df$elpd_diff))
# rescaled_value <- max_elpd_axis*(x/(max-min)) - min/(max-min)-max_elpd_axis
plot_df$embolden_ticks <- ifelse(plot_df$model %in% candidate_models,"bold","plain")
plot_df$shape <- ifelse(plot_df$model %in% candidate_models,'Candidate Model','Other Model')
plot_df$ticks_colour <- ifelse(grepl("group",plot_df$model),"darkgreen","black")
plot <- ggplot(plot_df)+
geom_point(aes(x=model, y=elpd_diff,color="red", shape=shape, size=shape))+
geom_point(aes(x=model_type, y= max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis,color="blue",shape=shape,size=shape))+
geom_path(aes(x=model_type, y=max_elpd_axis*Estimate/max_r2_axis-max_elpd_axis, color="blue"),group=1) +
geom_path(aes(x=model_type, y=elpd_diff,color="red"),group=1) +
geom_segment(aes(x = model_type,xend=model_type,y=max_elpd_axis*Q2.5/max_r2_axis-max_elpd_axis,yend=max_elpd_axis*Q97.5/max_r2_axis-max_elpd_axis),color="blue")+
geom_segment(aes(x = model,xend=model,y=lower,yend=upper),color="red")+
geom_hline(yintercept = max(plot_df$Estimate),linetype="dashed")+
scale_colour_manual(name = 'Measure',
values =c('blue'='blue','red'='red'), labels = c(bquote(~R^2),'ELPD'),guide='legend')+
scale_shape_manual(name = 'Candidate Models',
values =c('Candidate Model'=4,'Other Model'=16), labels = c("Potential to be selected","Excluded"))+
scale_size_manual(values =c('Candidate Model'=3,'Other Model'=1.5),guide = 'none')+
scale_y_continuous(
# Features of the first axis
name = "ELPD",
# Add a second axis and specify its features
sec.axis = sec_axis(~ ((.+max_elpd_axis)*max_r2_axis)/max_elpd_axis, name=bquote(~'Bayesian '~R^2 ~'for Intercept Only Models'))
) +
labs(title = title,
x="Levels Included")+
theme(
plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle=45,
hjust=1,
face =  plot_df$embolden_ticks,
colour=plot_df$ticks_colour),
panel.background  = element_blank(),
panel.border = element_rect(fill=NA, colour = "black"))
plot
ggsave(paste0(base_output_path,"r2_loo_comparison.png"),plot, width=3000,height=2000,units="px")
return(plot)
}
dual_axis_plot(loo_table=tva_loo_table,
r2_table=tva_r2_table,
title=bquote(~'ELPD and Bayesian '~R^2 ~'for Intercept Only Models (TVA)'),
base_output_path = "./outputs/overall_model_results/location_only_tva/",
candidate_models=c( "kg_class_village",
"country_village",
"county_village",
"county_village_group")
)
dual_axis_plot(loo_table=hdds_loo_table,
r2_table=hdds_r2_table,
title=bquote(~'ELPD and Bayesian '~R^2 ~'for Intercept Only Models (HDDS)'),
base_output_path = "./outputs/overall_model_results/location_only_hdds/",
candidate_models=c( "kg_class_village",
"country_village",
"county_village",
"county_village_group")
)
writeLines("test_file_output",paste0(opt$output,"/test_file.txt"))
indicator_data <- readr::read_csv(paste0(opt$data,"/02-prepared-data/modelling_df.csv"))
opt <- list(
iter=20,
warmup=10,
data="./data/",
output="./outputs/test_per_proj",
ncores=4,
proj='1'
)
indicator_data <- readr::read_csv(paste0(opt$data,"/02-prepared-data/modelling_df.csv"))
indicator_data
project_id <- unique(indicator_data$id_form)[as.numeric(opt$proj)]
subset_df <- indicator_data[indicator_data$id_form==project_id,]
project_id <- unique(indicator_data$id_form)[as.numeric(opt$proj)]
subset_df <- indicator_data[indicator_data$id_form==project_id,]
subset_df
package_version("projpred")
packageVersion("projpred")
packageVersion("brms")
packageVersion("cmdstan")
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/hdds/weak_prior_fixed.rda")
model
model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_fixed.rda")
model
model$data
model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_only.rda")
model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_fixed.rda")
model <- loadRData("outputs/31_05_2023/outputs/overall_models/variable_addition/tva/weak_prior_fixed.rda")
model
