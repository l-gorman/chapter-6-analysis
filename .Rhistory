#
#
# diversity <- function(indicator_data){
#   crop_price_and_value <- map_to_wide_format(indicator_data,
#                                              name_column = "crop_name",
#                                              column_prefixes = c("crop_harvest_kg_per_year","mean_crop_price_lcu_per_kg"),
#                                              types=c("num","num"))
#   # plain_crop_diversity <- rowSums(!is.na(crop_price_and_value[[1]]))
#
#
#   crop_value <- crop_price_and_value[["crop_harvest_kg_per_year"]]*crop_price_and_value[["mean_crop_price_lcu_per_kg"]]
#
#   livestock <- map_to_wide_format(indicator_data,
#                                   name_column = "livestock_name",
#                                   column_prefixes = c(
#                                     "livestock_sale_income",
#
#                                     "meat_kg_per_year",
#                                     "mean_meat_price_per_kg",
#
#                                     "milk_collected_litres_per_year",
#                                     "milk_price_per_litre",
#
#                                     "eggs_collected_kg_per_year",
#                                     "eggs_price_per_kg",
#
#                                     "bees_honey_kg_per_year",
#                                     "bees_honey_price_per_kg"),
#                                   types=c("num","num","num","num","num","num","num","num","num"))
#   # plain_crop_diversity <- rowSums(!is.na(crop_price_and_value[[1]]))
#
#   livestock_value <- livestock[["livestock_sale_income"]]
#   meat_value <- livestock[["meat_kg_per_year"]]*livestock[["mean_meat_price_per_kg"]]
#   milk_value <- livestock[["milk_collected_litres_per_year"]]*livestock[["milk_price_per_litre"]]
#   eggs_value <- livestock[["eggs_collected_kg_per_year"]]*livestock[["eggs_price_per_kg"]]
#   honey_value <- livestock[["bees_honey_kg_per_year"]]*livestock[["bees_honey_price_per_kg"]]
#
#
#   off_farm_income <- map_to_wide_format(indicator_data,
#                                         name_column = "offfarm_income_name",
#                                         column_prefixes = c("offfarm_income_name"),
#                                         types=c("chr"))[["offfarm_income_name"]]
#   off_farm_income[!is.na(off_farm_income)] <- "1"
#   off_farm_income <- off_farm_income %>% mutate_all(as.numeric)
#   off_farm_income <- off_farm_income/rowSums(off_farm_income,na.rm=T)
#   off_farm_value <- off_farm_income*indicator_data$off_farm_income_lcu_per_year
#
#
#   value_matrix <- bind_cols(crop_value,
#                             livestock_value,
#                             meat_value,
#                             milk_value,
#                             eggs_value,
#                             honey_value,
#                             off_farm_value)
#
#   indicator_data$weighted_income_diversity <- apply(value_matrix,1,diversity_index)
#
#   return( indicator_data)
# }
# indicator_data <- diversity(indicator_data)
# Number Income Sources
# plain_crop_diversity <- rowSums(!is.na(crop_price_and_value[[1]]))
crop_incomes <- map_to_wide_format(indicator_data,
name_column = "crop_name",
column_prefixes = c("crop_sold_income"),
types=c("num"))
number_of_crop_incomes <- rowSums(!is.na(crop_incomes[[1]]))
livestock_incomes <-  map_to_wide_format(indicator_data,
name_column = "livestock_name",
column_prefixes = c(
"livestock_sale_income",
"meat_sold_income",
"milk_sold_income",
"eggs_sold_income",
"bees_honey_sold_income"),
types=c("num","num","num","num","num"))
# plain_crop_diversity <- rowSums(!is.na(crop_price_and_value[[1]]))
number_livestock_incomes <- lapply(livestock_incomes, function(x){
rowSums(!is.na(x))
}) %>% bind_cols() %>% rowSums()
off_farm_income <- map_to_wide_format(indicator_data,
name_column = "offfarm_income_name",
column_prefixes = c("offfarm_income_name"),
types=c("chr"))[["offfarm_income_name"]]
number_off_farm_incomes <-  rowSums(!is.na(off_farm_income))
number_income_sources <- number_of_crop_incomes+number_livestock_incomes+number_off_farm_incomes
indicator_data$number_income_sources <- number_income_sources
# Improved Breeds
livestock_column_loop_number <- rhomis::find_number_of_loops(indicator_data,name_column = "livestock_breeds")
loop_columns <- paste0("livestock_breeds_",c(1:livestock_column_loop_number))
breeds_data <- indicator_data[loop_columns]
improved_breeds <- lapply(breeds_data, function(x) {
as.numeric(grepl("improved",x) |   grepl("exotic",x))
}
) %>%
bind_cols() %>%
rowSums(., na.rm=T)
find_loop_number_and_extract_values(indicator_data, "livestock_breeds")
# Less than 10% have an improved breed
# Livestock Orientation, Market Orientation ----------------------------------------
# Tva per hh per year (LCU)
subset_columns <- c("total_income_lcu_per_year","value_farm_products_consumed_lcu_per_hh_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$tva_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$tva_per_hh_per_year[na.rows] <- NA
# Tva per mae per day in PPP
subset_columns <- c("tva_per_hh_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$tva_per_mae_per_day_ppp <- indicator_data$tva_per_hh_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
indicator_data$tva_per_mae_per_day_ppp[na.rows] <- NA
per_proj_conv_prop_tibble <- make_per_project_conversion_tibble(indicator_data$id_rhomis_dataset,proportion_conversions)
off_farm_prop <- switch_units(data_to_convert = indicator_data$offfarm_income_proportion,unit_tibble = per_proj_conv_prop_tibble,id_vector = indicator_data$id_rhomis_dataset)
off_farm_prop[indicator_data$offfarm_incomes_any=="n"] <- 0
indicator_data$off_farm_any <- as.numeric(off_farm_prop>0)
# Income per mae per day (ppp)
# subset_columns <- c("total_income_lcu_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
# na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
# indicator_data$income_per_mae_per_day_ppp <- indicator_data$total_income_lcu_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
# indicator_data$income_per_mae_per_day_ppp[na.rows] <- NA
#Crop Income per mae per day
# subset_columns <- c("crop_income_lcu_per_year","hh_size_mae","currency_conversion_lcu_to_ppp")
# na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
# indicator_data$crop_income_per_mae_per_day_ppp <- indicator_data$crop_income_lcu_per_year/indicator_data$hh_size_mae/365/indicator_data$currency_conversion_lcu_to_ppp
# indicator_data$crop_income_per_mae_per_day_ppp[na.rows] <- NA
# Crop value total per hh per year (LCU)
# subset_columns <- c("crop_income_lcu_per_year","value_crop_consumed_lcu_per_hh_per_year")
# na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
# indicator_data$crop_value_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
# indicator_data$crop_value_per_hh_per_year[na.rows] <- NA
# Livestock value per hh per year (LCU)
# subset_columns <- c("livestock_income_lcu_per_year","value_livestock_products_consumed_lcu_per_hh_per_year")
# na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
# indicator_data$livestock_value_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
# indicator_data$livestock_value_per_hh_per_year[na.rows] <- NA
# Farm income per hh per year (LCU)
subset_columns <- c("crop_income_lcu_per_year","livestock_income_lcu_per_year")
na.rows <- rowSums(is.na(indicator_data[subset_columns]))==length(subset_columns)
indicator_data$value_farm_products_sold_per_hh_per_year <- rowSums(indicator_data[subset_columns], na.rm=T)
indicator_data$value_farm_products_sold_per_hh_per_year[na.rows] <- NA
#Livestock Orientation
# subset_columns <- c("livestock_value_per_hh_per_year","tva_per_hh_per_year")
# indicator_data$livestock_orientation <- indicator_data[["livestock_value_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
# Crop Orientation
# subset_columns <- c("crop_value_per_hh_per_year","tva_per_hh_per_year")
# indicator_data$crop_orientation <- indicator_data[["crop_value_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
# Off farm orientation
# subset_columns <- c("off_farm_income_lcu_per_year","tva_per_hh_per_year")
# indicator_data$off_farm_orientation <- indicator_data[["off_farm_income_lcu_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
# Market orientation
subset_columns <- c("value_farm_products_sold_per_hh_per_year","tva_per_hh_per_year")
indicator_data$market_orientation <- indicator_data[["value_farm_products_sold_per_hh_per_year"]]/indicator_data[["tva_per_hh_per_year"]]
# indicator_data$proportion_female_control <- indicator_data$proportion_of_value_controlled_female_youth+
#   indicator_data$proportion_of_value_controlled_female_adult
#Add off-farm income
vars <- c(
"id_form",
"id_unique",
"iso_country_code",
"kg_class_name",
"gdlcode",
"village",
# Village Level Variables
"adjusted_length_growing_period", # centered transform
"min_travel_time", # centered transform
"population_density",
# County Level Variables
"gdl_shdi",
# Country Level Variables
"gdl_country_shdi",
# Not using proportion of working age, can't get it out of enough datasets
"hh_size_mae",
"education_cleaned",
"external_labour",
"assisted_tillage",
"livestock_tlu", # centered transform
"land_cultivated_ha",
# "aidreceived",
"debts_have",
# "proportion_female_control",
# "livestock_orientation", #logit transform
# "crop_orientation", #logit transform
# "off_farm_orientation", #logit transform
"livestock_inputs_any",
"land_irrigated_any",
"use_fert",
"kitchen_garden",
"off_farm_any",
"market_orientation", # logit transform
"number_income_sources",
# "weighted_income_diversity", # centred transform
"tva_per_mae_per_day_ppp", # centered transform
"hdds_lean_season" # z-score notmalisation
)
modelling_data_set <- indicator_data[vars]
variable_summary <- function(
df,
variable,
description,
level,
criteria,
criteria_description,
actions,
justification
){
df[[variable]][is.infinite(df[[variable]])] <- NA
summary <- list(
Variable=variable,
Min=round(min(df[[variable]],na.rm=T),2),
Max=round(max(df[[variable]],na.rm=T),2),
Mean=round(mean(df[[variable]],na.rm=T),2),
SD=round(sd(df[[variable]],na.rm=T),2),
Q.01=round(quantile(df[[variable]],probs=c(0.01),na.rm=T),2),
Q.05=round(quantile(df[[variable]],probs=c(0.05),na.rm=T),2),
Q.95=round(quantile(df[[variable]],probs=c(0.95),na.rm=T),2),
Q.99=round(quantile(df[[variable]],probs=c(0.99),na.rm=T),2)
) %>% as_tibble()
if(length(criteria)>1){
summary_addition <- list(
Variable=rep(NA,length(criteria)-1),
Min=rep(NA,length(criteria)-1),
Max=rep(NA,length(criteria)-1),
Mean=rep(NA,length(criteria)-1),
SD=rep(NA,length(criteria)-1),
Q.01=rep(NA,length(criteria)-1),
Q.05=rep(NA,length(criteria)-1),
Q.95=rep(NA,length(criteria)-1),
Q.99=rep(NA,length(criteria)-1)
)%>% as_tibble()
summary <- bind_rows(summary,summary_addition)
}
exclusion_list <- list()
for (i in 1:length(criteria)){
temp_function <- criteria[[i]]
result <- temp_function(df[[variable]])
number_of_values <- table(result)["TRUE"]
if (is.na(number_of_values)){
number_of_values <- 0
}
exclusion_list[[i]] <-list(
Criteria=criteria_description[[i]],
Action=actions[[i]],
Justification=justification[[i]],
Count=as.numeric(number_of_values)
)
}
exclusion_list <- bind_rows(exclusion_list)
summary <- bind_cols(summary,exclusion_list)
return(summary)
}
hh_size_summary <-variable_summary(
df=modelling_data_set,
variable="hh_size_mae",
description="Number of Household Members in MAE",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>30}),
criteria_description=c("Null Value", "Zero Value","Above 30 MAE"),
actions=c("Exclude", "Exclude", "Exclude"),
justification=c(
"Houeshold must have a size to be considered a household",
"Household cannot be considered if it has no members",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tlu_summary <-variable_summary(
df=modelling_data_set,
variable="livestock_tlu",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x>100}),
criteria_description=c("Null Value", "Below 100 TLU"),
actions=c("NAs will be converted to 0","Excluded"),
justification=c(
"",
"Less than 1% of households above this amount. Likely that household of this size due to error"
)
)
tva_summary <-variable_summary(
df=modelling_data_set,
variable="tva_per_mae_per_day_ppp",
description="",
level="Household Level",
criteria=list(
function(x){is.na(x)},
function(x){x==0},
function(x){x>10000}),
criteria_description=c("Null Value", "Zero Value","Reported than 10,000 (PPP$/MAE/Day)"),
actions=c("Excluded","Excluded","Excluded"),
justification=c(
"Value a key performance indicator",
"Household has to have at least some farm produce",
"Less than 1% of households above this amount. Likely that farming household not earning this much per person per day"
)
)
growing_period_summary <-variable_summary(
df=modelling_data_set,
variable="adjusted_length_growing_period",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>365}),
criteria_description=c("Null Value", "Growing period of more than 365 days"),
actions=c("Exclude", "Exclude"),
justification=c(
"Cannot have no growing period",
"Cannot have growing period of more than 365 days"
)
)
travel_time_summary <-variable_summary(
df=modelling_data_set,
variable="min_travel_time",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>2880}),
criteria_description=c("Null Value", "Travel time more than 48 hours"),
actions=c("Exclude","Exclude"),
justification=c(
"NAs will removed",
"Unlikely more than 48 hours travel time to closest town"
)
)
hdi_summary <-variable_summary(
df=modelling_data_set,
variable="gdl_shdi",
description="",
level="Village Level",
criteria=list(
function(x){is.na(x)},
function(x){x>1}),
criteria_description=c("Null Value", "More than 1"),
actions=c("Exclude", "Exclude"),
justification=c(
"Only 1 household",
"Proportional measure, cannot be greater than 1"
)
)
exclusion_summary <- bind_rows(
hh_size_summary,
tlu_summary,
tva_summary,
growing_period_summary,
travel_time_summary,
hdi_summary
)
readr::write_csv(exclusion_summary,"./outputs/02-data-exploration/numeric_variable_exclusion_summary.csv")
above_row_selectors <- which(!is.na(exclusion_summary$Variable))-1
above_row_selectors <- above_row_selectors[above_row_selectors!=0]
# bold_row_selectors <- which(!is.na(cleaned_aggregation$`Cleaned Value`))
cleaned_aggregation <- exclusion_summary %>% flextable::flextable() %>%
bold( bold = TRUE, part="header") %>%
hline(i = above_row_selectors)  %>%
bold(j = c("Variable", "Count"))
save_as_image(cleaned_aggregation, "./outputs/02-data-exploration/numeric_variable_exclusion_summary.png")
#-------------------------------------------------------------------------
# variable_summary -------------------------------------------------------
#-------------------------------------------------------------------------
variable_summary <- tribble(
~Category,~Variable, ~`Data Type`, ~Level, ~Description,~`Reason for Inclusion`,
"Grouping Variables","id_form","categorical","Household-Level","","",
"Grouping Variables","gdlcode","categorical","Household-Level","","",
"Grouping Variables","iso_country_code","categorical","Household-Level","","",
"Grouping Variables","village","categorical","Household-Level","","",
"Demographics","hh_size_mae","continuous","Household-Level","","",
"Demographics","education_cleaned","continuous","Household-Level","","",
"Resource Endowment","livestock_tlu","continuous","Household-Level","","", # centered transform
"Resource Endowment","land_cultivated_ha","continuous","Household-Level","","",
"Off Farm", "off_farm_any", "binary","Household-Level","","",
# "Production Orientation","livestock_orientation","proportion","Household-Level","","", #logit transform
# "Production Orientation","crop_orientation","proportion","Household-Level","","", #logit transform
# "Production Orientation","off_farm_orientation","proportion","Household-Level","","", #logit transform
# "Production Orientation","market_orientation","proportion","Household-Level","","", # logit transform
# "Production Orientation","weighted_income_diversity","continuous","Household-Level","","", # centred transform
# "Gender","proportion_female_control","proportion","Household-Level","","", # centred transform
# Village Level Variables
"Village Variables","adjusted_length_growing_period","continuous","Village Level","","", # centered transform
"Village Variables","min_travel_time","continuous","Village Level","","", # centered transform
"Village Variables","kg_class_name","categorical","Village Level","","",
"Village Variables","population_density","numeric","Village Level","","",
# County Level Variables
"County Descriptors","gdl_shdi","proportion","County","","",
# Country Level Variables
"Country Descriptors","gdl_country_shdi","proportion","Country","","",
"Performance Indicators","tva_per_mae_per_day_ppp","continuous","Household Level","","", # centered transform
"Performance Indicators","hdds","ordinal","Household Level","","",
)
readr::write_csv(variable_summary,"./outputs/02-data-exploration/variable_summary.csv")
# Transformation ----------------------------------------------------------
ihs <- function(x) {
y <- log(x + sqrt(x^2 + 1))
return(y)
}
as_sqrt <- function(x){
y <- asin(sqrt(x))
return(y)
}
log_add_half_min <- function(x){
replacement <- min(x[x>0 & !is.na(x)])/2
x[x==0] <- replacement
return(log(x))
}
logit <- function(x){
min_replacement <- min(x[x>0.000001 & x<0.999999 & !is.na(x)])/2
max_replacement <- (1-max(x[x>0.000001 & x<0.999999 & !is.na(x)]))/2
x[x<0.001] <- min_replacement
x[x>0.999] <- 1-max_replacement
return(log(x/(1 - x)))
}
normalisation <- function(x){
return((x - mean(x)) / sd(x))
}
modelling_data_set$livestock_tlu[ is.na(modelling_data_set$livestock_tlu)] <- 0
modelling_data_set <- modelling_data_set[modelling_data_set$hh_size_mae>0 & !is.na(modelling_data_set$hh_size_mae),]
modelling_data_set <- modelling_data_set[modelling_data_set$tva_per_mae_per_day_ppp>0 & !is.na(modelling_data_set$tva_per_mae_per_day_ppp),]
colSums(is.na(modelling_data_set))
modelling_data_set <- modelling_data_set[complete.cases(modelling_data_set),]
modelling_data_set <- modelling_data_set[modelling_data_set$market_orientation>=0,]
modelling_data_set <- modelling_data_set[
modelling_data_set$hh_size_mae<30&
modelling_data_set$livestock_tlu<100&
modelling_data_set$tva_per_mae_per_day_ppp<10000&
modelling_data_set$min_travel_time<2880
,]
final_modelling_df <- modelling_data_set[c("id_form",
"id_unique",
"iso_country_code",
"kg_class_name",
"gdlcode",
"village",
"external_labour",
"assisted_tillage",
"debts_have",
"livestock_inputs_any",
"land_irrigated_any",
"use_fert",
"kitchen_garden",
"off_farm_any"
)]
final_modelling_df$education <-modelling_data_set$education_cleaned
# HHsize Standardisation (Log)
final_modelling_df$hh_size <- log_add_half_min(modelling_data_set$hh_size_mae)
final_modelling_df$hh_size <- normalisation(final_modelling_df$hh_size)
# Livestock TLU (Log)
final_modelling_df$livestock_tlu <- log_add_half_min(modelling_data_set$livestock_tlu)
final_modelling_df$livestock_tlu <- normalisation(final_modelling_df$livestock_tlu)
# Land Cultivated (Log)
final_modelling_df$land_cultivated <- log_add_half_min(modelling_data_set$land_cultivated_ha)
final_modelling_df$land_cultivated <- normalisation(final_modelling_df$land_cultivated)
# hist(modelling_data_set$land_cultivated_ha)
# temp <- ihs(modelling_data_set$land_cultivated_ha)
# hist(temp)
# temp <- log_add_half_min(modelling_data_set$land_cultivated_ha)
# hist(temp)
# Livestock Orientation (Logit)
# modelling_data_set$logit_livestock_orientation <- logit(modelling_data_set$livestock_orientation)
# modelling_data_set$logit_livestock_orientation <- normalisation(modelling_data_set$logit_livestock_orientation)
# # Crop Orientation (Logit)
# modelling_data_set$logit_crop_orientation <- logit(modelling_data_set$crop_orientation)
# modelling_data_set$logit_crop_orientation <- normalisation(modelling_data_set$logit_crop_orientation)
# Off Farm Orientation (Logit)
# modelling_data_set$logit_off_farm_orientation <- logit(modelling_data_set$off_farm_orientation)
# modelling_data_set$logit_off_farm_orientation <- normalisation(modelling_data_set$logit_off_farm_orientation)
# Market Orientation (Logit)
final_modelling_df$market_orientation <- as_sqrt(modelling_data_set$market_orientation)
final_modelling_df$market_orientation <- normalisation(final_modelling_df$market_orientation)
# Income diversity (Log)
# modelling_data_set$log_income_diversity <- log_add_half_min(modelling_data_set$weighted_income_diversity)
# modelling_data_set$log_income_diversity <- normalisation(modelling_data_set$log_income_diversity)
# Gender Control
# modelling_data_set$logit_proportion_female_control <- logit(modelling_data_set$proportion_female_control)
# modelling_data_set$logit_proportion_female_control <- normalisation(modelling_data_set$logit_proportion_female_control)
log
income_values_original <-  modelling_data_set["tva_per_mae_per_day_ppp"]
income_values_original
write_csv(income_values_original,"data/02-prepared-data/income_data_only.csv")
tva_original <- readr::read_csv("data/02-prepared-data/income_data_only.csv")
tva_original
sd_log_tva <- sd(log(tva_original$tva_per_mae_per_day_ppp))
sd_log_tva
log(tva_original$tva_per_mae_per_day_ppp)
tva_original$tva_per_mae_per_day_ppp
hist(tva_original$tva_per_mae_per_day_ppp)
boxplot(tva_original$tva_per_mae_per_day_ppp)
boxplot(tva_original$tva_per_mae_per_day_ppp, outline=F)
mean_log_tva <- mean(log(tva_original$tva_per_mae_per_day_ppp))
mean_log_tva
sd(log(tva_original$tva_per_mae_per_day_ppp))
log(tva_original$tva_per_mae_per_day_ppp)
hist(log(tva_original$tva_per_mae_per_day_ppp))
transform_prediction <- function(value, mean_log_tva,sd_log_tva){
converted_value  <- exp(value*sd_log_tva+mean_log_tva)
return(converted_value
)
}
test_df <- readr::read_csv("data/02-prepared-data/test_df.csv")
tva_test_conv <- transform_prediction(test_df$tva,mean_log_tva,sd_log_tva)
tva_test_conv
boxplot(tva_test_conv,outline=F)
table(tva_test_conv < 1.90)
predictions_tva_converted <- transform_prediction(predictions_tva$Estimate,mean_log_tva,sd_log_tva)
predictions_tva_converted
boxplot(predictions_tva_converted)
boxplot(predictions_tva_converted, outline=F)
tva_test_conv
predictions_tva_converted
