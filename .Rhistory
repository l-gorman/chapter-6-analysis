#County Level
norm_gdl_lifexp +
# Levels
(1 | iso_country_code) +
(1 +
#Household Level
education_cleaned +
log_livestock_tlu +
log_land_cultivated +
logit_off_farm_orientation +
logit_market_orientation +
logit_proportion_female_control+
log_income_diversity | iso_country_code:village)),
# (1 | id_form)),
prior="horseshoe")
# 8
# list(
#   tag="horseshoe_mixed_form",
#   data=indicator_data,
#   formula=bf(log_tva ~ 1 +
#                #Household Level
#                education_cleaned +
#                log_livestock_tlu +
#                log_land_cultivated +
#                logit_off_farm_orientation +
#                logit_market_orientation +
#                logit_proportion_female_control+
#                log_income_diversity +
#
#                # Village Level
#                norm_growing_period +
#                log_min_travel_time +
#                #County Level
#                norm_gdl_lifexp +
#                # Levels
#                (1 | iso_country_code) +
#                (1 | iso_country_code:village)+
#                (1  +
#                   #Household Level
#                   education_cleaned +
#                   log_livestock_tlu +
#                   log_land_cultivated +
#                   logit_off_farm_orientation +
#                   logit_market_orientation +
#                   logit_proportion_female_control+
#                   log_income_diversity | id_form)),
#   prior="horseshoe")
#
#
)
length(models)
library(readr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
library(tidybayes)
library(brms)
library(ggplot2)
library(bayesplot)
library(hexbin)
library(flextable)
loadRData <- function(fileName){
#loads an RData file, and returns it
load(fileName)
get(ls()[ls() != "fileName"])
}
vpc <- function(model, params){
draws_df <-  as_draws_df(model)[params]
vpcs <- list()
for (param in params){
other_params <- params[params!=param]
vpcs[[param]] <- draws_df[[param]]^2/rowSums(draws_df[params]^2)
}
vpcs <- vpcs %>% as_tibble()
return(vpcs)
}
summarise_estimates <- function(draws_df, params_list){
# draws_df$Total <- rowSums(draws_df)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draw_summary <- rbind(draws.66,draws.95)
clean_names <- names(params_list)[match(draw_summary$key,as.character(params_list))]
# clean_names <- c("Total",names(params_list))[match(draw_summary$key,c("Total",as.character(params_list)))]
draw_summary$key <- clean_names
return(draw_summary)
}
estimates_plot <- function(draws_df,
params_list,
title,
sort=F
){
draw_summary <-summarise_estimates(draws_df,
params_list)
draw_summary$key <- factor(draw_summary$key,
levels=names(params_list),
ordered = T)
draw_summary$level <- factor(draw_summary$level, levels=c("0.66 Level","0.95 Level"),ordered = T)
if (sort==T){
factor_order <- draw_summary$key[order(draw_summary$Estimate[draw_summary$level=="0.66 Level"])]
draw_summary$key <- factor(draw_summary$key, levels=factor_order,ordered = T)
}
plot <- ggplot(draw_summary, aes(y = key,x=Estimate,shape="Estimate"))+
geom_point(show.legend = T,size=3)+
geom_segment(aes(y=key,yend=key,x=min,xend=max,linewidth=level))+
scale_discrete_manual("linewidth", values = c("0.95 Level"=0.75, "0.66 Level"=1.5))+
labs(x="Estimate", y="", title=title)+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid", "solid"))),
shape=guide_legend(title="")) +
theme(plot.title = element_text(hjust=0.5))
return(plot)
}
model_1 <- loadRData("./outputs/12_05_2023/simulation/simulation/simulation_1/model.rda")
model_1
plot_levels_correlations <- function(
model,
level_1,
level_2,
facet=T
){
draws <- as_draws_df(model,variable =c(level_1,level_2) )
vars <- colnames(draws)
vars <- vars[vars %in% c(".chain",".iteration",".draw")==F]
level_1_vars <- vars[grep(paste0("^",level_1,"\\["),vars)]
level_1_levels <- gsub(".*\\[","",level_1_vars)
level_1_levels <- gsub(",.*","",level_1_levels)
level_2_vars <- vars[grep(paste0("^",level_2,"\\["),vars)]
all_data_to_plot <-list()
for (i in 1:length(level_1_vars))
{
upper_level <- level_1_levels[i]
upper_level_whole <- level_1_vars[i]
relevant_level_2_levels <- level_2_vars[grep(paste0(upper_level,"_"),level_2_vars)]
data_to_plot <- draws[c(upper_level_whole,relevant_level_2_levels)]
data_to_plot <- data_to_plot %>% melt(id.vars=upper_level_whole)
data_to_plot$variable <- NULL
colnames(data_to_plot) <- c("upper_group", "lower_group")
data_to_plot$upper_level <- upper_level
all_data_to_plot[[upper_level]] <- data_to_plot
}
all_data_to_plot <- bind_rows(all_data_to_plot)
if (facet==F){
plot_random_cors <- ggplot(all_data_to_plot,aes(x=upper_group,y=lower_group))+
geom_hex()
return(plot_random_cors)
}
plot_random_cors <- ggplot(all_data_to_plot,aes(x=upper_group,y=lower_group))+
geom_hex()+
facet_wrap(~upper_level)
return(plot_random_cors)
}
model_1
get_variables()
get_variables(model_1)
draws <- as_draws_df(model_1,variable = as.character(levels))
levels <- list(
"Between Country"="sd_country__Intercept",
"Between Project"="sd_country:project__Intercept",
"Between Village"="sd_country:project:village__Intercept",
"Unexplained"="sigma"
)
draws <- as_draws_df(model_1,variable = as.character(levels))
draws
estimates_plot(draws)
estimates_plot(draws,params_list = levels,title = "")
estimates_plot(draws,params_list = levels,title = "")
draws
levels <- list(
"Between Country"="sd_country__Intercept",
"Between Project"="sd_country:project__Intercept",
"Between Village"="sd_country:project:village__Intercept",
"Unexplained"="sigma"
)
levels
draws
draws <- as_draws_df(model_1,variable = as.character(levels))
draws
levels
estimates_plot(draws,params_list = levels,title = "")
draws_df = draws
params_list = levels
draw_summary <-summarise_estimates(draws_df,
params_list)
draw_summary
# draws_df$Total <- rowSums(draws_df)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.66
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draws.95
draw_summary <- rbind(draws.66,draws.95)
draw_summary
as.character(params_list)
clean_names <- names(params_list)[match(draw_summary$key,as.character(params_list))]
clean_names
# clean_names <- c("Total",names(params_list))[match(draw_summary$key,c("Total",as.character(params_list)))]
draw_summary$key <- clean_names
draw_summary
draw_summary <- draw_summary[!is.na(draw_summary$key),]
summarise_estimates <- function(draws_df, params_list){
# draws_df$Total <- rowSums(draws_df)
draws.66 <- draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.17)),
max=quantile(value,probs=c(0.83)),
level="0.66 Level",
)
draws.95 <-draws_df %>%
gather() %>%
group_by(key) %>%
summarise(
Estimate=mean(value),
min=quantile(value,probs=c(0.025)),
max=quantile(value,probs=c(0.975)),
level="0.95 Level",
)
draw_summary <- rbind(draws.66,draws.95)
clean_names <- names(params_list)[match(draw_summary$key,as.character(params_list))]
# clean_names <- c("Total",names(params_list))[match(draw_summary$key,c("Total",as.character(params_list)))]
draw_summary$key <- clean_names
draw_summary <- draw_summary[!is.na(draw_summary$key),]
return(draw_summary)
}
estimates_plot <- function(draws_df,
params_list,
title,
sort=F
){
draw_summary <-summarise_estimates(draws_df,
params_list)
draw_summary$key <- factor(draw_summary$key,
levels=names(params_list),
ordered = T)
draw_summary$level <- factor(draw_summary$level, levels=c("0.66 Level","0.95 Level"),ordered = T)
if (sort==T){
factor_order <- draw_summary$key[order(draw_summary$Estimate[draw_summary$level=="0.66 Level"])]
draw_summary$key <- factor(draw_summary$key, levels=factor_order,ordered = T)
}
plot <- ggplot(draw_summary, aes(y = key,x=Estimate,shape="Estimate"))+
geom_point(show.legend = T,size=3)+
geom_segment(aes(y=key,yend=key,x=min,xend=max,linewidth=level))+
scale_discrete_manual("linewidth", values = c("0.95 Level"=0.75, "0.66 Level"=1.5))+
labs(x="Estimate", y="", title=title)+
guides(linewidth = guide_legend(title="",
nrow = 2,
byrow = TRUE,
override.aes = list(shape = c(NA), linetype = c("solid", "solid"))),
shape=guide_legend(title="")) +
theme(plot.title = element_text(hjust=0.5))
return(plot)
}
plot_levels_correlations <- function(
model,
level_1,
level_2,
facet=T
){
draws <- as_draws_df(model,variable =c(level_1,level_2) )
vars <- colnames(draws)
vars <- vars[vars %in% c(".chain",".iteration",".draw")==F]
level_1_vars <- vars[grep(paste0("^",level_1,"\\["),vars)]
level_1_levels <- gsub(".*\\[","",level_1_vars)
level_1_levels <- gsub(",.*","",level_1_levels)
level_2_vars <- vars[grep(paste0("^",level_2,"\\["),vars)]
all_data_to_plot <-list()
for (i in 1:length(level_1_vars))
{
upper_level <- level_1_levels[i]
upper_level_whole <- level_1_vars[i]
relevant_level_2_levels <- level_2_vars[grep(paste0(upper_level,"_"),level_2_vars)]
data_to_plot <- draws[c(upper_level_whole,relevant_level_2_levels)]
data_to_plot <- data_to_plot %>% melt(id.vars=upper_level_whole)
data_to_plot$variable <- NULL
colnames(data_to_plot) <- c("upper_group", "lower_group")
data_to_plot$upper_level <- upper_level
all_data_to_plot[[upper_level]] <- data_to_plot
}
all_data_to_plot <- bind_rows(all_data_to_plot)
if (facet==F){
plot_random_cors <- ggplot(all_data_to_plot,aes(x=upper_group,y=lower_group))+
geom_hex()
return(plot_random_cors)
}
plot_random_cors <- ggplot(all_data_to_plot,aes(x=upper_group,y=lower_group))+
geom_hex()+
facet_wrap(~upper_level)
return(plot_random_cors)
}
model_1 <- loadRData("./outputs/12_05_2023/simulation/simulation/simulation_1/model.rda")
levels <- list(
"Between Country"="sd_country__Intercept",
"Between Project"="sd_country:project__Intercept",
"Between Village"="sd_country:project:village__Intercept",
"Unexplained"="sigma"
)
draws <- as_draws_df(model_1,variable = as.character(levels))
estimates_plot(draws_df = draws,params_list = levels, title = "")
plot_levels_correlations(model = model_1,level_1 = "sd_country__Intercept",level_2 = "sd_country:project__Intercept")
model_1
model = model_1
plot_levels_correlations(model = model_1,level_1 = "r_country__Intercept",level_2 = "r_country:project__Intercept")
plot_levels_correlations(model = model_1,level_1 = "r_country__Intercept",level_2 = "r_country:project__Intercept")
model = model_1
plot_levels_correlations(model = model_1,level_1 = "r_country",level_2 = "r_country:project")
plot_levels_correlations(model = model_1,level_1 = "r_country",level_2 = "r_country:project")
model = model_1
level_1 = "r_country"
level_2 = "r_country:project"
level_2 = "r_country:project"
level_1 = "r_country"
model = model_1
draws <- as_draws_df(model,variable =c(level_1,level_2) )
vars <- colnames(draws)
vars <- vars[vars %in% c(".chain",".iteration",".draw")==F]
level_1_vars <- vars[grep(paste0("^",level_1,"\\["),vars)]
level_1_levels <- gsub(".*\\[","",level_1_vars)
level_1_levels <- gsub(",.*","",level_1_levels)
level_2_vars <- vars[grep(paste0("^",level_2,"\\["),vars)]
level_2_vars
level_1_levels
level_1_vars
all_data_to_plot <-list()
for (i in 1:length(level_1_vars))
{
upper_level <- level_1_levels[i]
upper_level_whole <- level_1_vars[i]
relevant_level_2_levels <- level_2_vars[grep(paste0(upper_level,"_"),level_2_vars)]
data_to_plot <- draws[c(upper_level_whole,relevant_level_2_levels)]
data_to_plot <- data_to_plot %>% melt(id.vars=upper_level_whole)
data_to_plot$variable <- NULL
colnames(data_to_plot) <- c("upper_group", "lower_group")
data_to_plot$upper_level <- upper_level
all_data_to_plot[[upper_level]] <- data_to_plot
}
i
upper_level <- level_1_levels[i]
upper_level
upper_level_whole <- level_1_vars[i]
upper_level_whole
relevant_level_2_levels <- level_2_vars[grep(paste0(upper_level,"_"),level_2_vars)]
relevant_level_2_levels
level_2_vars <- vars[grep(paste0("^",level_2,"\\["),vars)]
level_2_vars
draws <- as_draws_df(model,variable =c(level_1,level_2) )
vars <- colnames(draws)
vars
vars <- vars[vars %in% c(".chain",".iteration",".draw")==F]
vars
level_1_vars <- vars[grep(paste0("^",level_1,"\\["),vars)]
level_1_vars
level_1_levels <- gsub(".*\\[","",level_1_vars)
level_1_levels
level_1_levels <- gsub(",.*","",level_1_levels)
level_1_levels
level_2_vars <- vars[grep(paste0("^",level_2,"\\["),vars)]
level_2_vars
all_data_to_plot <-list()
i <- 2
i <- 1
upper_level <- level_1_levels[i]
upper_level_whole <- level_1_vars[i]
upper_level_whole
relevant_level_2_levels <- level_2_vars[grep(paste0(upper_level,"_"),level_2_vars)]
relevant_level_2_levels
data_to_plot <- draws[c(upper_level_whole,relevant_level_2_levels)]
data_to_plot
upper_level_whole
data_to_plot <- data_to_plot %>% melt(id.vars=upper_level_whole)
library(reshape2)
data_to_plot <- data_to_plot %>% melt(id.vars=upper_level_whole)
data_to_plot
data_to_plot$variable <- NULL
colnames(data_to_plot) <- c("upper_group", "lower_group")
data_to_plot$upper_level <- upper_level
all_data_to_plot[[upper_level]] <- data_to_plot
plot_levels_correlations <- function(
model,
level_1,
level_2,
facet=T
){
draws <- as_draws_df(model,variable =c(level_1,level_2) )
vars <- colnames(draws)
vars <- vars[vars %in% c(".chain",".iteration",".draw")==F]
level_1_vars <- vars[grep(paste0("^",level_1,"\\["),vars)]
level_1_levels <- gsub(".*\\[","",level_1_vars)
level_1_levels <- gsub(",.*","",level_1_levels)
level_2_vars <- vars[grep(paste0("^",level_2,"\\["),vars)]
all_data_to_plot <-list()
for (i in 1:length(level_1_vars))
{
upper_level <- level_1_levels[i]
upper_level_whole <- level_1_vars[i]
relevant_level_2_levels <- level_2_vars[grep(paste0(upper_level,"_"),level_2_vars)]
data_to_plot <- draws[c(upper_level_whole,relevant_level_2_levels)]
data_to_plot <- data_to_plot %>% melt(id.vars=upper_level_whole)
data_to_plot$variable <- NULL
colnames(data_to_plot) <- c("upper_group", "lower_group")
data_to_plot$upper_level <- upper_level
all_data_to_plot[[upper_level]] <- data_to_plot
}
all_data_to_plot <- bind_rows(all_data_to_plot)
if (facet==F){
plot_random_cors <- ggplot(all_data_to_plot,aes(x=upper_group,y=lower_group))+
geom_hex()
return(plot_random_cors)
}
plot_random_cors <- ggplot(all_data_to_plot,aes(x=upper_group,y=lower_group))+
geom_hex()+
facet_wrap(~upper_level)
return(plot_random_cors)
}
plot_levels_correlations(model = model_1,level_1 = "r_country",level_2 = "r_country:project")
model_2 <- loadRData("./outputs/12_05_2023/simulation/simulation/simulation_2/model.rda")
levels <- list(
"Between Country"="sd_country__Intercept",
"Between Project"="sd_country:project__Intercept",
"Between Village"="sd_country:project:village__Intercept",
"Unexplained"="sigma"
)
draws <- as_draws_df(model_2,variable = as.character(levels))
estimates_plot(draws_df = draws,params_list = levels, title = "")
plot_levels_correlations(model = model_2,level_1 = "r_country",level_2 = "r_country:project")
plot_levels_correlations(model = model_2,level_1 = "r_country",level_2 = "r_country:project",facet = T)
estimates_plot(draws_df = draws,params_list = levels, title = "")
vpc(draws_df = draws,params_list = levels, title = "")
vpc(draws_df = draws,params_list = levels)
draws
vpc(model = model_2,params_list = levels)
vpc(model = model_2,params = levels)
levels
levels <- list(
"Between Country"="sd_country__Intercept",
"Between Project"="sd_country:project__Intercept",
"Between Village"="sd_country:project:village__Intercept",
"Unexplained"="sigma"
)
vpc(model = model_2,params = levels)
levels
vpc(model = model_2,params = levels)
model = model_2
params = levels
model = model_2
params = levels
draws_df <-  as_draws_df(model)[params]
model
vpc(model = model_2,params = as.character(levels))
20*20*20*20
10*10*5*10
20*20*20
configs <- list(
# 1 Project per Country, 20 countries
# list(
#   n_countries = 20,
#   avg_projects_per_country = 1,
#   avg_villages_per_project=20,
#   avg_individuals_per_village=20
# ),
#
# # 1 Country, many projects
# list(
#   n_countries = 1,
#   avg_projects_per_country = 20,
#   avg_villages_per_project=20,
#   avg_individuals_per_village=20
# ),
# Many countries,
# Many projects
list(
n_countries = 10,
avg_projects_per_country = 10,
avg_villages_per_project=10,
avg_individuals_per_village=10
)
)
